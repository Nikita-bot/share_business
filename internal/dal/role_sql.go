
// Code generated by mtgroup-generator.
package dal

import (
	"time"
		"database/sql"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

const (

	sqlGetRole = `
	SELECT
		id,
		active,
		name
	FROM
		roles
	WHERE
		id=:id AND
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted
	`

	sqlGetMyRoleID = `
	SELECT
		id
	FROM
		roles
	WHERE
		created_by=:created_by AND
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted AND
		bound
	`


	sqlAddRole = `
	INSERT INTO roles(
		active,
		name,
		id,
		created_by,
		isolated_entity_id
	) VALUES (
		:active,
		:name,
		:id,
		:created_by,
		:isolated_entity_id
	)
	RETURNING
		id
	`
						sqlAddToPermissionsInRole = `
	INSERT INTO role_permissions(
		role_id,
		permissions_id,
		isolated_entity_id
		)
	VALUES (
		:role_id,
		:permissions_id,
		:isolated_entity_id
	)
	`

	sqlBindRoleToProfile = `
	UPDATE
		roles
	SET
		bound=true
	WHERE
		id=:id AND
		created_by=:created_by AND
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted AND
		NOT bound
	`

	sqlDeleteRole = `
	UPDATE
		roles
	SET
		deleted=true,
		deleted_at=:deleted_at,
		deleted_by=:deleted_by
	WHERE
		id=:id AND
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted
	`

	sqlEditRole = `
	UPDATE
		roles
	SET
		active=:active,
		name=:name
	WHERE
		id=:id AND
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted
	`
	
	sqlListRole = `
	SELECT
		id,
		active,
		name
	FROM
		roles
	WHERE
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted
	`
	sqlListRoleCount = `
	SELECT
		COUNT(*)
	FROM
		roles
	WHERE
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted
	`
			
			
			
						sqlGetPermissionsIDsForRoleLazyLoading = `
	SELECT
		role_id,
		permissions_id
	FROM
		role_permissions
	WHERE
		role_id=:id AND
		isolated_entity_id=:isolated_entity_id
	`
					sqlGetPermissionsForRoleLazyLoading = `
	SELECT
		id,
		name
	FROM
		permissions
	WHERE
		id=:id AND
		isolated_entity_id=:isolated_entity_id
	`
			
			
			
			
			
			
			
			
			
			
			
			
			
			sqlDeleteFromPermissionsInRole = `
	DELETE FROM
		role_permissions
	WHERE
		role_id=:role_id AND
		permissions_id=:permissions_id AND
		isolated_entity_id=:isolated_entity_id
	`
	
)

type (
    argGetRole struct {
        ID sql.NullString `db:"id"`
			IsolatedEntityID string `db:"isolated_entity_id"`
    }

	argGetMyRoleID struct {
			CreatedBy string `db:"created_by"`
			IsolatedEntityID string `db:"isolated_entity_id"`
    }
	argAddRole struct {
							ID string `db:"id"`
							Active bool `db:"active"`
							Name string `db:"name"`
			CreatedBy string `db:"created_by"`
			IsolatedEntityID string `db:"isolated_entity_id"`
	}
						argPermissionsInRole struct {
							RoleID interface{} `db:"role_id"`
							PermissionsID interface{} `db:"permissions_id"`
								IsolatedEntityID string `db:"isolated_entity_id"`
						}
	argBindRoleToProfile struct {
		ID string `db:"id"`
			CreatedBy string `db:"created_by"`
			IsolatedEntityID string `db:"isolated_entity_id"`
	}
	argEditRole struct {
						ID string `db:"id"`
						Active bool `db:"active"`
						Name string `db:"name"`
			IsolatedEntityID string `db:"isolated_entity_id"`
	}
	argDeleteRole struct {
		ID string `db:"id"`
		DeletedAt *time.Time `db:"deleted_at"`
		DeletedBy string `db:"deleted_by"`
			IsolatedEntityID string `db:"isolated_entity_id"`
	}
)