// Code generated by mtgroup-generator.
package user

import (
	uuid "github.com/satori/go.uuid"
	"time"
	"wash-bonus/internal/app"
	"wash-bonus/internal/app/entity"
	"wash-bonus/internal/app/entity/vo"
)

type UserSvc interface {
	GetByIdentityID(prof entity.IdentityProfile) (*entity.User, error)
	Get(prof entity.IdentityProfile, id string) (*entity.User, error)
	Add(prof entity.IdentityProfile, u entity.User) error
	Edit(prof entity.IdentityProfile, id string, update vo.UserUpdate) error
	Delete(prof entity.IdentityProfile, id string) error
	List(prof entity.IdentityProfile, filter vo.ListFilter) ([]entity.User, []string, error)
}

type Repository interface {
	GetUserByIdentityID(identityID string) (*entity.User, error)
	GetUser(id string) (*entity.User, error)
	AddUser(u entity.User) error
	EditUser(id string, update vo.UserUpdate, editedBy entity.User) error
	DeleteUser(id string, deletedBy entity.User) error
	ListUsers(filter vo.ListFilter) ([]entity.User, []string, error)
}

type Service struct {
	repo Repository
}

func NewService(repo Repository) UserSvc {
	return &Service{repo: repo}
}

func (a *Service) GetByIdentityID(prof entity.IdentityProfile) (*entity.User, error) {
	user, err := a.repo.GetUserByIdentityID(prof.UID)
	if err != nil {
		if err != app.ErrNotFound {
			return nil, err
		}

		t := time.Now()
		err = a.Add(prof, entity.User{
			Active:     true,
			CreatedAt:  &t,
			ID:         uuid.UUID{},
			IdentityID: prof.UID,
			ModifiedAt: nil,
		})
		user, err = a.repo.GetUserByIdentityID(prof.UID)
		if err != nil {
			return nil, err
		}
	}

	return user, nil
}

func (a *Service) Get(prof entity.IdentityProfile, id string) (*entity.User, error) {
	return a.repo.GetUser(id)
}

func (a *Service) Add(prof entity.IdentityProfile, u entity.User) error {
	return a.repo.AddUser(u)
}

func (a *Service) Edit(prof entity.IdentityProfile, id string, update vo.UserUpdate) error {
	editor, err := a.repo.GetUserByIdentityID(prof.UID)
	if err != nil {
		return err
	}

	return a.repo.EditUser(id, update, *editor)
}

func (a *Service) Delete(prof entity.IdentityProfile, id string) error {
	editor, err := a.repo.GetUserByIdentityID(prof.UID)
	if err != nil {
		return err
	}
	return a.repo.DeleteUser(id, *editor)
}

func (a *Service) List(prof entity.IdentityProfile, filter vo.ListFilter) ([]entity.User, []string, error) {
	return a.repo.ListUsers(filter)
}
