// Code generated by mtgroup-generator.
package app

import ()

// Make sure not to overwrite this file after you generated it because all your edits would be lost!
type Role struct {
	Active      bool
	ID          string
	Name        string
	Permissions []*Permission
}

func (a *app) GetRole(prof Profile, id string) (*Role, error) {
	if !a.rulesSet.GetRoleAccessManager(prof) {
		return nil, ErrAccessDenied
	}
	return a.repo.GetRole(id, prof.IsolatedEntityID)
}
func (a *app) AddRole(prof Profile, m *Role) (*Role, error) {
	if !a.rulesSet.AddRoleAccessManager(prof) {
		return nil, ErrAccessDenied
	}
	return a.repo.AddRole(prof.ID, prof.IsolatedEntityID, m)
}
func (a *app) EditRole(prof Profile, id string, m *Role) error {
	if !a.rulesSet.EditRoleAccessManager(prof) {
		return ErrAccessDenied
	}
	return a.repo.EditRole(id, prof.IsolatedEntityID, m)
}
func (a *app) DeleteRole(prof Profile, id string) error {
	if !a.rulesSet.DeleteRoleAccessManager(prof) {
		return ErrAccessDenied
	}
	return a.repo.DeleteRole(id, prof.ID, prof.IsolatedEntityID)
}
func (a *app) ListRole(prof Profile, params *ListParams) ([]*Role, []string, error) {
	if !a.rulesSet.ListRoleAccessManager(prof) {
		return nil, nil, ErrAccessDenied
	}
	return a.repo.ListRole(prof.IsolatedEntityID, params)
}

func (a *app) AddPermissionsRole(id string, isolatedEntityID string, itemsID []string, items []*Permission) error {
	return a.repo.AddPermissionsRole(id, isolatedEntityID, itemsID, items)
}

func (a *app) DeletePermissionsRole(id string, isolatedEntityID string, items []string) error {
	return a.repo.DeletePermissionsRole(id, isolatedEntityID, items)
}
