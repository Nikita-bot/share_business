// Code generated by mtgroup-generator.
package app

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

// App provides application features service.
type App interface {
	GetUser(prof Profile, id string) (*User, error)
	AddUser(prof Profile, m *User) (*User, error)
	EditUser(prof Profile, id string, m *User) error
	DeleteUser(prof Profile, id string) error
	ListUser(prof Profile, params *ListParams) ([]*User, []string, error)

	GetWashServer(prof Profile, id string) (*WashServer, error)
	AddWashServer(prof Profile, m *WashServer) (*WashServer, error)
	EditWashServer(prof Profile, id string, m *WashServer) error
	DeleteWashServer(prof Profile, id string) error
	ListWashServer(prof Profile, params *ListParams) ([]*WashServer, []string, error)

	GetWashSession(prof Profile, id string) (*WashSession, error)
	AddWashSession(prof Profile, m *WashSession) (*WashSession, error)
	EditWashSession(prof Profile, id string, m *WashSession) error
	DeleteWashSession(prof Profile, id string) error
	ListWashSession(prof Profile, params *ListParams) ([]*WashSession, []string, error)

	AddTestData(prof Profile) error
}

// Repo interface for data repository
type Repo interface {
	GetUser(id string, isolatedEntityID string) (*User, error)
	AddUser(profileID string, isolatedEntityID string, m *User) (*User, error)
	EditUser(id string, isolatedEntityID string, m *User) error
	DeleteUser(id string, profileID string, isolatedEntityID string) error
	ListUser(isolatedEntityID string, params *ListParams) ([]*User, []string, error)

	GetWashServer(id string, isolatedEntityID string) (*WashServer, error)
	AddWashServer(profileID string, isolatedEntityID string, m *WashServer) (*WashServer, error)
	EditWashServer(id string, isolatedEntityID string, m *WashServer) error
	DeleteWashServer(id string, profileID string, isolatedEntityID string) error
	ListWashServer(isolatedEntityID string, params *ListParams) ([]*WashServer, []string, error)



    AddTestData(profileID, isolatedEntityID string) error
}


    type ListParams struct {
        Offset       int64
        Limit        int64
        FilterGroups []*FilterGroup
        SortBy       string
        OrderBy      string
    }

    type FilterGroup struct {
        Key         string
        LogicFilter bool
        Filters     []*Filter
    }

    type Filter struct {
        Value      string
        Operator   string
        IgnoreCase bool
    }

type app struct {
	repo     Repo
	rulesSet RulesSet
}

func New(r Repo, rs RulesSet) (App) {
	return &app{
		repo: r,
        rulesSet: rs,
	}
}
    func (a *app) AddTestData(prof Profile) error {
        if !prof.Authz.Admin {
            return ErrAccessDenied
        }
        return a.repo.AddTestData(prof.ID, prof.IsolatedEntityID)
    }
