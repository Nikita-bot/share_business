// Code generated by mtgroup-generator.
package app

import (
	"wash-bonus/internal/app/entity"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

// App provides application features service.
type App interface {
	GetBonusBalance(id string) (*BonusBalance, error)
	AddBonusBalance(balance float64, userId string) (*BonusBalance, error)
	EditBonusBalance(id string, balance float64) error
	DeleteBonusBalance(id string, userId string) error

	GetWashServer(prof Profile, id string) (*WashServer, error)
	AddWashServer(prof Profile, m *WashServer) (*WashServer, error)
	EditWashServer(prof Profile, id string, m *WashServer) error
	DeleteWashServer(prof Profile, id string) error
	ListWashServer(prof Profile, params *ListParams) ([]*WashServer, []string, error)

	AddTestData(prof entity.IdentityProfile) error
}

// Repo interface for data user
type Repo interface {
	GetBonusBalance(id string) (*BonusBalance, error)
	AddBonusBalance(balance float64, userId string) (*BonusBalance, error)
	EditBonusBalance(id string, balance float64) error
	DeleteBonusBalance(id string, userId string) error

	GetWashServer(id string, isolatedEntityID string) (*WashServer, error)
	AddWashServer(profileID string, isolatedEntityID string, m *WashServer) (*WashServer, error)
	EditWashServer(id string, isolatedEntityID string, m *WashServer) error
	DeleteWashServer(id string, profileID string, isolatedEntityID string) error
	ListWashServer(isolatedEntityID string, params *ListParams) ([]*WashServer, []string, error)

	AddTestData(profileID, isolatedEntityID string) error
}

// TODO: Fully remove this stub
// Stub for Authorized Profile Identity
type Profile struct {
}

type ListParams struct {
	Offset       int64
	Limit        int64
	FilterGroups []*FilterGroup
	SortBy       string
	OrderBy      string
}

type FilterGroup struct {
	Key         string
	LogicFilter bool
	Filters     []*Filter
}

type Filter struct {
	Value      string
	Operator   string
	IgnoreCase bool
}

type app struct {
	repo Repo
}

func New(r Repo) App {
	return &app{
		repo: r,
	}
}
func (a *app) AddTestData(prof entity.IdentityProfile) error {
	if true {
		return ErrAccessDenied
	}
	return a.repo.AddTestData("prof_id_stub", "")
}
