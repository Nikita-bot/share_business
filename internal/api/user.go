// Code generated by mtgroup-generator.
package api

import (
	"errors"
	"time"
	"wash-bonus/internal/def"

	"github.com/go-openapi/swag"

	"wash-bonus/internal/api/restapi/models"
	user "wash-bonus/internal/api/restapi/restapi/operations/user"
	"wash-bonus/internal/app"

	extauthapi "wash-bonus/internal/authentication"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!
func (svc *service) GetUser(params user.GetUserParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
	c, err := svc.app.GetUser(toAppProfile(prof), params.Body.ID)
	switch {
	default:
		log.PrintErr("GetUser server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return user.NewGetUserDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("GetUser client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return user.NewGetUserDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case errors.Is(err, app.ErrNotFound):
		log.Info("GetUser client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
		return user.NewGetUserDefault(codeNotFound.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeNotFound.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("GetUser ok", "id", params.Body.ID)
		return user.NewGetUserOK().WithPayload(apiUser(c))
	}
}
func (svc *service) AddUser(params user.AddUserParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
	c, err := svc.app.AddUser(toAppProfile(prof), appUserAdd(params.Body))
	switch {
	default:
		log.PrintErr("AddUser server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return user.NewAddUserDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("AddUser client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return user.NewAddUserDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("AddUser ok")
		return user.NewAddUserCreated().WithPayload(apiUser(c))
	}
}
func (svc *service) EditUser(params user.EditUserParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
	err := svc.app.EditUser(toAppProfile(prof), params.Body.ID, appUserAdd(params.Body.Data))
	switch {
	default:
		log.PrintErr("EditUser server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return user.NewEditUserDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("EditUser client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return user.NewEditUserDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case errors.Is(err, app.ErrNotFound):
		log.Info("EditUser client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
		return user.NewEditUserDefault(codeNotFound.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeNotFound.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("EditUser ok")
		return user.NewEditUserOK()
	}
}
func (svc *service) DeleteUser(params user.DeleteUserParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
	err := svc.app.DeleteUser(toAppProfile(prof), params.Body.ID)
	switch {
	default:
		log.PrintErr("DeleteUser server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return user.NewDeleteUserDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("DeleteUser client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return user.NewDeleteUserDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case errors.Is(err, app.ErrNotFound):
		log.Info("DeleteUser client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
		return user.NewDeleteUserDefault(codeNotFound.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeNotFound.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("DeleteUser ok", "id", params.Body.ID)
		return user.NewDeleteUserNoContent()
	}
}
func (svc *service) ListUser(params user.ListUserParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
	c, warnings, err := svc.app.ListUser(toAppProfile(prof), appListParams(params.Body))
	switch {
	default:
		log.PrintErr("ListUser server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return user.NewListUserDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("ListUser client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return user.NewListUserDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("ListUser ok")
		return user.NewListUserOK().WithPayload(&user.ListUserOKBody{
			Items:    apiUsers(c),
			Warnings: warnings,
		})
	}
}

func apiUser(a *app.User) *models.User {
	if a == nil {
		return nil
	}
	return &models.User{
		ID:         a.ID,
		Active:     a.Active,
		CreatedAt:  (*strfmt.DateTime)(a.CreatedAt),
		ModifiedAt: (*strfmt.DateTime)(a.ModifiedAt),
	}
}

func apiUsers(apps []*app.User) []*models.User {
	apis := []*models.User{}
	for i := range apps {
		apis = append(apis, apiUser(apps[i]))
	}
	return apis
}

func appUser(a *models.User, withStructs bool) *app.User {
	if a == nil {
		return nil
	}
	user := &app.User{}
	user.ID = a.ID
	user.Active = a.Active
	user.CreatedAt = (*time.Time)(a.CreatedAt)
	user.ModifiedAt = (*time.Time)(a.ModifiedAt)

	return user
}

func appUsers(apis []*models.User, withStructs bool) []*app.User {
	apps := []*app.User{}
	for i := range apis {
		apps = append(apps, appUser(apis[i], withStructs))
	}
	return apps
}

func appUserAdd(a *models.UserAdd) *app.User {
	if a == nil {
		return nil
	}
	user := &app.User{}
	user.Active = a.Active
	return user
}

func appUsersAdd(apis []*models.UserAdd) []*app.User {
	apps := []*app.User{}
	for i := range apis {
		apps = append(apps, appUserAdd(apis[i]))
	}
	return apps
}
