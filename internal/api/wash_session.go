// Code generated by mtgroup-generator.
package api

import (
	"errors"
	"time"
	"wash-bonus/internal/def"

	"github.com/go-openapi/swag"

	"wash-bonus/internal/api/restapi/models"
	washSession "wash-bonus/internal/api/restapi/restapi/operations/wash_session"
	"wash-bonus/internal/app"

	extauthapi "wash-bonus/internal/authentication"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!
func (svc *service) GetWashSession(params washSession.GetWashSessionParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
	c, err := svc.app.GetWashSession(toAppProfile(prof), params.Body.ID)
	switch {
	default:
		log.PrintErr("GetWashSession server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return washSession.NewGetWashSessionDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("GetWashSession client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return washSession.NewGetWashSessionDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case errors.Is(err, app.ErrNotFound):
		log.Info("GetWashSession client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
		return washSession.NewGetWashSessionDefault(codeNotFound.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeNotFound.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("GetWashSession ok", "id", params.Body.ID)
		return washSession.NewGetWashSessionOK().WithPayload(apiWashSession(c))
	}
}
func (svc *service) AddWashSession(params washSession.AddWashSessionParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
	c, err := svc.app.AddWashSession(toAppProfile(prof), appWashSessionAdd(params.Body))
	switch {
	default:
		log.PrintErr("AddWashSession server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return washSession.NewAddWashSessionDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("AddWashSession client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return washSession.NewAddWashSessionDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("AddWashSession ok")
		return washSession.NewAddWashSessionCreated().WithPayload(apiWashSession(c))
	}
}
func (svc *service) EditWashSession(params washSession.EditWashSessionParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
	err := svc.app.EditWashSession(toAppProfile(prof), params.Body.ID, appWashSessionAdd(params.Body.Data))
	switch {
	default:
		log.PrintErr("EditWashSession server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return washSession.NewEditWashSessionDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("EditWashSession client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return washSession.NewEditWashSessionDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case errors.Is(err, app.ErrNotFound):
		log.Info("EditWashSession client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
		return washSession.NewEditWashSessionDefault(codeNotFound.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeNotFound.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("EditWashSession ok")
		return washSession.NewEditWashSessionOK()
	}
}
func (svc *service) DeleteWashSession(params washSession.DeleteWashSessionParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
	err := svc.app.DeleteWashSession(toAppProfile(prof), params.Body.ID)
	switch {
	default:
		log.PrintErr("DeleteWashSession server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return washSession.NewDeleteWashSessionDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("DeleteWashSession client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return washSession.NewDeleteWashSessionDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case errors.Is(err, app.ErrNotFound):
		log.Info("DeleteWashSession client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
		return washSession.NewDeleteWashSessionDefault(codeNotFound.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeNotFound.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("DeleteWashSession ok", "id", params.Body.ID)
		return washSession.NewDeleteWashSessionNoContent()
	}
}
func (svc *service) ListWashSession(params washSession.ListWashSessionParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
	c, warnings, err := svc.app.ListWashSession(toAppProfile(prof), appListParams(params.Body))
	switch {
	default:
		log.PrintErr("ListWashSession server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return washSession.NewListWashSessionDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("ListWashSession client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return washSession.NewListWashSessionDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("ListWashSession ok")
		return washSession.NewListWashSessionOK().WithPayload(&washSession.ListWashSessionOKBody{
			Items:    apiWashSessions(c),
			Warnings: warnings,
		})
	}
}

func apiWashSession(a *app.WashSession) *models.WashSession {
	if a == nil {
		return nil
	}
	return &models.WashSession{
		ID:           a.ID,
		Active:       a.Active,
		ClosingAt:    (*strfmt.DateTime)(a.ClosingAt),
		CreatedAt:    (*strfmt.DateTime)(a.CreatedAt),
		ExpirationAt: (*strfmt.DateTime)(a.ExpirationAt),
		UpdateAt:     (*strfmt.DateTime)(a.UpdateAt),
		User:         apiToken(a.User),
		WashServer:   apiWashServer(a.WashServer),
	}
}

func apiWashSessions(apps []*app.WashSession) []*models.WashSession {
	apis := []*models.WashSession{}
	for i := range apps {
		apis = append(apis, apiWashSession(apps[i]))
	}
	return apis
}

func appWashSession(a *models.WashSession, withStructs bool) *app.WashSession {
	if a == nil {
		return nil
	}
	washSession := &app.WashSession{}
	if withStructs {
		washSession.User = appToken(a.User)
		washSession.WashServer = appWashServer(a.WashServer)
	}
	washSession.ID = a.ID
	washSession.Active = a.Active
	washSession.ClosingAt = (*time.Time)(a.ClosingAt)
	washSession.CreatedAt = (*time.Time)(a.CreatedAt)
	washSession.ExpirationAt = (*time.Time)(a.ExpirationAt)
	washSession.UpdateAt = (*time.Time)(a.UpdateAt)

	return washSession
}

func appWashSessions(apis []*models.WashSession, withStructs bool) []*app.WashSession {
	apps := []*app.WashSession{}
	for i := range apis {
		apps = append(apps, appWashSession(apis[i], withStructs))
	}
	return apps
}

func appWashSessionAdd(a *models.WashSessionAdd) *app.WashSession {
	if a == nil {
		return nil
	}
	washSession := &app.WashSession{}
	washSession.Active = a.Active
	washSession.ClosingAt = (*time.Time)(a.ClosingAt)
	washSession.ExpirationAt = (*time.Time)(a.ExpirationAt)
	washSession.UpdateAt = (*time.Time)(a.UpdateAt)
	if a.User != "" {
		washSession.User = &app.Token{ID: a.User}
	}
	if a.WashServer != "" {
		washSession.WashServer = &app.WashServer{ID: a.WashServer}
	}

	return washSession
}

func appWashSessionsAdd(apis []*models.WashSessionAdd) []*app.WashSession {
	apps := []*app.WashSession{}
	for i := range apis {
		apps = append(apps, appWashSessionAdd(apis[i]))
	}
	return apps
}
