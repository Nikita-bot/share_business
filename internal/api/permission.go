// Code generated by mtgroup-generator.   
package api

import (
	"errors"
	"wash-bonus/internal/def"
	"github.com/go-openapi/swag"

	"wash-bonus/internal/api/restapi/models"
	permission "wash-bonus/internal/api/restapi/restapi/operations/permission"
	"wash-bonus/internal/app"

	extauthapi "github.com/mtgroupit/mt-mock-extauthapi"
	"github.com/go-openapi/runtime/middleware" 
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!
func (svc *service) GetPermission(params permission.GetPermissionParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
		c, err := svc.app.GetPermission(toAppProfile(prof), params.Body.ID)
		switch {
		default:
			log.PrintErr("GetPermission server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return permission.NewGetPermissionDefault(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrAccessDenied):
			log.Info("GetPermission client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
			return permission.NewGetPermissionDefault(codeForbidden.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeForbidden.extra),
				Message: swag.String(err.Error()),
			})
		case errors.Is(err, app.ErrNotFound):
			log.Info("GetPermission client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
			return permission.NewGetPermissionDefault(codeNotFound.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeNotFound.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("GetPermission ok", "id", params.Body.ID)
			return permission.NewGetPermissionOK().WithPayload(apiPermission(c))
		}
}
func (svc *service) AddPermission(params permission.AddPermissionParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
		c, err := svc.app.AddPermission(toAppProfile(prof), appPermissionAdd(params.Body))
		switch {
		default:
			log.PrintErr("AddPermission server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return permission.NewAddPermissionDefault(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrAccessDenied):
			log.Info("AddPermission client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
			return permission.NewAddPermissionDefault(codeForbidden.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeForbidden.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("AddPermission ok")
			return permission.NewAddPermissionCreated().WithPayload(apiPermission(c))
		}
}
func (svc *service) EditPermission(params permission.EditPermissionParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
		err := svc.app.EditPermission(toAppProfile(prof), params.Body.ID, appPermissionAdd(params.Body.Data))
		switch {
		default:
			log.PrintErr("EditPermission server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return permission.NewEditPermissionDefault(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrAccessDenied):
			log.Info("EditPermission client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
			return permission.NewEditPermissionDefault(codeForbidden.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeForbidden.extra),
				Message: swag.String(err.Error()),
			})
		case errors.Is(err, app.ErrNotFound):
			log.Info("EditPermission client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
			return permission.NewEditPermissionDefault(codeNotFound.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeNotFound.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("EditPermission ok")
			return permission.NewEditPermissionOK()
		}
}
func (svc *service) DeletePermission(params permission.DeletePermissionParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
		err := svc.app.DeletePermission(toAppProfile(prof), params.Body.ID)
		switch {
		default:
			log.PrintErr("DeletePermission server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return permission.NewDeletePermissionDefault(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrAccessDenied):
			log.Info("DeletePermission client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
			return permission.NewDeletePermissionDefault(codeForbidden.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeForbidden.extra),
				Message: swag.String(err.Error()),
			})
		case errors.Is(err, app.ErrNotFound):
			log.Info("DeletePermission client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
			return permission.NewDeletePermissionDefault(codeNotFound.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeNotFound.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("DeletePermission ok", "id", params.Body.ID)
			return permission.NewDeletePermissionNoContent()
		}
}
func (svc *service) ListPermission(params permission.ListPermissionParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
		c, warnings, err := svc.app.ListPermission(toAppProfile(prof), appListParams(params.Body))
		switch {
		default:
			log.PrintErr("ListPermission server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return permission.NewListPermissionDefault(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrAccessDenied):
			log.Info("ListPermission client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
			return permission.NewListPermissionDefault(codeForbidden.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeForbidden.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("ListPermission ok")
			return permission.NewListPermissionOK().WithPayload(&permission.ListPermissionOKBody{
				Items: apiPermissions(c),
				Warnings: warnings,
			})
		}
}
  



func apiPermission(a *app.Permission) *models.Permission {
	if a == nil {
		return nil
	}
	return &models.Permission{
			ID: a.ID,
			Name: a.Name,
	}
}

func apiPermissions(apps []*app.Permission) []*models.Permission {
	apis := []*models.Permission{}
	for i := range apps {
		apis = append(apis, apiPermission(apps[i]))
	}
	return apis
}

func appPermission(a *models.Permission) *app.Permission {
	if a == nil {
		return nil
	}
	permission := &app.Permission{}
			permission.ID = a.ID
			permission.Name = a.Name
	
	return permission
}

func appPermissions(apis []*models.Permission) []*app.Permission {
	apps := []*app.Permission{}
	for i := range apis {
		apps = append(apps, appPermission(apis[i]))
	}
	return apps
}

func appPermissionAdd(a *models.PermissionAdd) *app.Permission {
	if a == nil {
		return nil
	}
	permission := &app.Permission{}
			permission.Name = a.Name
	
	
	return permission
}

func appPermissionsAdd(apis []*models.PermissionAdd) []*app.Permission {
	apps := []*app.Permission{}
	for i := range apis {
		apps = append(apps, appPermissionAdd(apis[i]))
	}
	return apps
}
