// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenAdd token model for add and edit methods
//
// swagger:model tokenAdd
type TokenAdd struct {

	// expiration at
	// Format: date-time
	ExpirationAt *strfmt.DateTime `json:"expirationAt,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this token add
func (m *TokenAdd) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenAdd) validateExpirationAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationAt", "body", "date-time", m.ExpirationAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this token add based on context it is used
func (m *TokenAdd) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TokenAdd) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenAdd) UnmarshalBinary(b []byte) error {
	var res TokenAdd
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
