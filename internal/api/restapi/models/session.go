// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Session session object
//
// swagger:model session
type Session struct {

	// active
	Active bool `json:"active,omitempty"`

	// closing at
	// Format: date-time
	ClosingAt *strfmt.DateTime `json:"closingAt,omitempty"`

	// created at
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt,omitempty"`

	// expiration at
	// Format: date-time
	ExpirationAt *strfmt.DateTime `json:"expirationAt,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// update at
	// Format: date-time
	UpdateAt *strfmt.DateTime `json:"updateAt,omitempty"`

	// user
	User *Token `json:"user,omitempty"`
}

// Validate validates this session
func (m *Session) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClosingAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Session) validateClosingAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ClosingAt) { // not required
		return nil
	}

	if err := validate.FormatOf("closingAt", "body", "date-time", m.ClosingAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Session) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Session) validateExpirationAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationAt", "body", "date-time", m.ExpirationAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Session) validateUpdateAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updateAt", "body", "date-time", m.UpdateAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Session) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this session based on the context it is used
func (m *Session) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Session) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Session) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Session) UnmarshalBinary(b []byte) error {
	var res Session
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
