// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"wash-bonus/internal/api/restapi/models"
)

// AddPermissionsRoleHandlerFunc turns a function with the right signature into a add permissions role handler
type AddPermissionsRoleHandlerFunc func(AddPermissionsRoleParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn AddPermissionsRoleHandlerFunc) Handle(params AddPermissionsRoleParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// AddPermissionsRoleHandler interface for that can handle valid add permissions role params
type AddPermissionsRoleHandler interface {
	Handle(AddPermissionsRoleParams, interface{}) middleware.Responder
}

// NewAddPermissionsRole creates a new http.Handler for the add permissions role operation
func NewAddPermissionsRole(ctx *middleware.Context, handler AddPermissionsRoleHandler) *AddPermissionsRole {
	return &AddPermissionsRole{Context: ctx, Handler: handler}
}

/*
	AddPermissionsRole swagger:route POST /role/addPermissions Role addPermissionsRole

AddPermissionsRole add permissions role API
*/
type AddPermissionsRole struct {
	Context *middleware.Context
	Handler AddPermissionsRoleHandler
}

func (o *AddPermissionsRole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddPermissionsRoleParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddPermissionsRoleBody add permissions role body
//
// swagger:model AddPermissionsRoleBody
type AddPermissionsRoleBody struct {

	// id
	ID string `json:"id,omitempty"`

	// items
	Items []*models.PermissionAdd `json:"items"`

	// items ID
	ItemsID []string `json:"itemsID"`
}

// Validate validates this add permissions role body
func (o *AddPermissionsRoleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddPermissionsRoleBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this add permissions role body based on the context it is used
func (o *AddPermissionsRoleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddPermissionsRoleBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddPermissionsRoleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddPermissionsRoleBody) UnmarshalBinary(b []byte) error {
	var res AddPermissionsRoleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
