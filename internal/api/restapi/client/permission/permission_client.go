// Code generated by go-swagger; DO NOT EDIT.

package permission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new permission API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for permission API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddPermission(params *AddPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddPermissionCreated, error)

	DeletePermission(params *DeletePermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePermissionNoContent, error)

	EditPermission(params *EditPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditPermissionOK, error)

	GetPermission(params *GetPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPermissionOK, error)

	ListPermission(params *ListPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPermissionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddPermission add permission API
*/
func (a *Client) AddPermission(params *AddPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddPermissionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addPermission",
		Method:             "POST",
		PathPattern:        "/permission/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddPermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddPermissionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddPermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeletePermission delete permission API
*/
func (a *Client) DeletePermission(params *DeletePermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePermissionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePermission",
		Method:             "DELETE",
		PathPattern:        "/permission/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePermissionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EditPermission edit permission API
*/
func (a *Client) EditPermission(params *EditPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editPermission",
		Method:             "PUT",
		PathPattern:        "/permission/edit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditPermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EditPermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPermission get permission API
*/
func (a *Client) GetPermission(params *GetPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPermission",
		Method:             "POST",
		PathPattern:        "/permission/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListPermission list permission API
*/
func (a *Client) ListPermission(params *ListPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPermission",
		Method:             "POST",
		PathPattern:        "/permission/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
