// Code generated by go-swagger; DO NOT EDIT.

package wash_session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wash session API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wash session API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddWashSession(params *AddWashSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddWashSessionCreated, error)

	DeleteWashSession(params *DeleteWashSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWashSessionNoContent, error)

	EditWashSession(params *EditWashSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditWashSessionOK, error)

	GetWashSession(params *GetWashSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWashSessionOK, error)

	ListWashSession(params *ListWashSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListWashSessionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddWashSession add wash session API
*/
func (a *Client) AddWashSession(params *AddWashSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddWashSessionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddWashSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addWashSession",
		Method:             "POST",
		PathPattern:        "/washSession/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddWashSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddWashSessionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddWashSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteWashSession delete wash session API
*/
func (a *Client) DeleteWashSession(params *DeleteWashSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWashSessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWashSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWashSession",
		Method:             "DELETE",
		PathPattern:        "/washSession/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWashSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWashSessionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWashSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EditWashSession edit wash session API
*/
func (a *Client) EditWashSession(params *EditWashSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditWashSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditWashSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editWashSession",
		Method:             "PUT",
		PathPattern:        "/washSession/edit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditWashSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditWashSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EditWashSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWashSession get wash session API
*/
func (a *Client) GetWashSession(params *GetWashSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWashSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWashSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWashSession",
		Method:             "POST",
		PathPattern:        "/washSession/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWashSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWashSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWashSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListWashSession list wash session API
*/
func (a *Client) ListWashSession(params *ListWashSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListWashSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWashSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listWashSession",
		Method:             "POST",
		PathPattern:        "/washSession/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListWashSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListWashSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListWashSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
