// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"wash-bonus/internal/api/restapi/models"
)

// EditRoleReader is a Reader for the EditRole structure.
type EditRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEditRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewEditRoleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEditRoleOK creates a EditRoleOK with default headers values
func NewEditRoleOK() *EditRoleOK {
	return &EditRoleOK{}
}

/*
EditRoleOK describes a response with status code 200, with default header values.

OK
*/
type EditRoleOK struct {
}

// IsSuccess returns true when this edit role o k response has a 2xx status code
func (o *EditRoleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this edit role o k response has a 3xx status code
func (o *EditRoleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit role o k response has a 4xx status code
func (o *EditRoleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this edit role o k response has a 5xx status code
func (o *EditRoleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this edit role o k response a status code equal to that given
func (o *EditRoleOK) IsCode(code int) bool {
	return code == 200
}

func (o *EditRoleOK) Error() string {
	return fmt.Sprintf("[PUT /role/edit][%d] editRoleOK ", 200)
}

func (o *EditRoleOK) String() string {
	return fmt.Sprintf("[PUT /role/edit][%d] editRoleOK ", 200)
}

func (o *EditRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEditRoleDefault creates a EditRoleDefault with default headers values
func NewEditRoleDefault(code int) *EditRoleDefault {
	return &EditRoleDefault{
		_statusCode: code,
	}
}

/*
EditRoleDefault describes a response with status code -1, with default header values.

error
*/
type EditRoleDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the edit role default response
func (o *EditRoleDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this edit role default response has a 2xx status code
func (o *EditRoleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this edit role default response has a 3xx status code
func (o *EditRoleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this edit role default response has a 4xx status code
func (o *EditRoleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this edit role default response has a 5xx status code
func (o *EditRoleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this edit role default response a status code equal to that given
func (o *EditRoleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *EditRoleDefault) Error() string {
	return fmt.Sprintf("[PUT /role/edit][%d] editRole default  %+v", o._statusCode, o.Payload)
}

func (o *EditRoleDefault) String() string {
	return fmt.Sprintf("[PUT /role/edit][%d] editRole default  %+v", o._statusCode, o.Payload)
}

func (o *EditRoleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *EditRoleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
EditRoleBody edit role body
swagger:model EditRoleBody
*/
type EditRoleBody struct {

	// data
	Data *models.RoleAdd `json:"data,omitempty"`

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this edit role body
func (o *EditRoleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EditRoleBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this edit role body based on the context it is used
func (o *EditRoleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EditRoleBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EditRoleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EditRoleBody) UnmarshalBinary(b []byte) error {
	var res EditRoleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
