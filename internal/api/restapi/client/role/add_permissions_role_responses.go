// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"wash-bonus/internal/api/restapi/models"
)

// AddPermissionsRoleReader is a Reader for the AddPermissionsRole structure.
type AddPermissionsRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddPermissionsRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddPermissionsRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAddPermissionsRoleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddPermissionsRoleOK creates a AddPermissionsRoleOK with default headers values
func NewAddPermissionsRoleOK() *AddPermissionsRoleOK {
	return &AddPermissionsRoleOK{}
}

/* AddPermissionsRoleOK describes a response with status code 200, with default header values.

OK
*/
type AddPermissionsRoleOK struct {
}

func (o *AddPermissionsRoleOK) Error() string {
	return fmt.Sprintf("[POST /role/addPermissions][%d] addPermissionsRoleOK ", 200)
}

func (o *AddPermissionsRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddPermissionsRoleDefault creates a AddPermissionsRoleDefault with default headers values
func NewAddPermissionsRoleDefault(code int) *AddPermissionsRoleDefault {
	return &AddPermissionsRoleDefault{
		_statusCode: code,
	}
}

/* AddPermissionsRoleDefault describes a response with status code -1, with default header values.

error
*/
type AddPermissionsRoleDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the add permissions role default response
func (o *AddPermissionsRoleDefault) Code() int {
	return o._statusCode
}

func (o *AddPermissionsRoleDefault) Error() string {
	return fmt.Sprintf("[POST /role/addPermissions][%d] addPermissionsRole default  %+v", o._statusCode, o.Payload)
}
func (o *AddPermissionsRoleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddPermissionsRoleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddPermissionsRoleBody add permissions role body
swagger:model AddPermissionsRoleBody
*/
type AddPermissionsRoleBody struct {

	// id
	ID string `json:"id,omitempty"`

	// items
	Items []*models.PermissionAdd `json:"items"`

	// items ID
	ItemsID []string `json:"itemsID"`
}

// Validate validates this add permissions role body
func (o *AddPermissionsRoleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddPermissionsRoleBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this add permissions role body based on the context it is used
func (o *AddPermissionsRoleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddPermissionsRoleBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddPermissionsRoleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddPermissionsRoleBody) UnmarshalBinary(b []byte) error {
	var res AddPermissionsRoleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
