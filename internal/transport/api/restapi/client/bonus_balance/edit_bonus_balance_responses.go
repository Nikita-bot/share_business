// Code generated by go-swagger; DO NOT EDIT.

package bonus_balance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"wash-bonus/internal/transport/api/restapi/models"
)

// EditBonusBalanceReader is a Reader for the EditBonusBalance structure.
type EditBonusBalanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditBonusBalanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEditBonusBalanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewEditBonusBalanceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEditBonusBalanceOK creates a EditBonusBalanceOK with default headers values
func NewEditBonusBalanceOK() *EditBonusBalanceOK {
	return &EditBonusBalanceOK{}
}

/*
EditBonusBalanceOK describes a response with status code 200, with default header values.

OK
*/
type EditBonusBalanceOK struct {
}

// IsSuccess returns true when this edit bonus balance o k response has a 2xx status code
func (o *EditBonusBalanceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this edit bonus balance o k response has a 3xx status code
func (o *EditBonusBalanceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit bonus balance o k response has a 4xx status code
func (o *EditBonusBalanceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this edit bonus balance o k response has a 5xx status code
func (o *EditBonusBalanceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this edit bonus balance o k response a status code equal to that given
func (o *EditBonusBalanceOK) IsCode(code int) bool {
	return code == 200
}

func (o *EditBonusBalanceOK) Error() string {
	return fmt.Sprintf("[PUT /balance/edit][%d] editBonusBalanceOK ", 200)
}

func (o *EditBonusBalanceOK) String() string {
	return fmt.Sprintf("[PUT /balance/edit][%d] editBonusBalanceOK ", 200)
}

func (o *EditBonusBalanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEditBonusBalanceDefault creates a EditBonusBalanceDefault with default headers values
func NewEditBonusBalanceDefault(code int) *EditBonusBalanceDefault {
	return &EditBonusBalanceDefault{
		_statusCode: code,
	}
}

/*
EditBonusBalanceDefault describes a response with status code -1, with default header values.

error
*/
type EditBonusBalanceDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the edit bonus balance default response
func (o *EditBonusBalanceDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this edit bonus balance default response has a 2xx status code
func (o *EditBonusBalanceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this edit bonus balance default response has a 3xx status code
func (o *EditBonusBalanceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this edit bonus balance default response has a 4xx status code
func (o *EditBonusBalanceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this edit bonus balance default response has a 5xx status code
func (o *EditBonusBalanceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this edit bonus balance default response a status code equal to that given
func (o *EditBonusBalanceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *EditBonusBalanceDefault) Error() string {
	return fmt.Sprintf("[PUT /balance/edit][%d] editBonusBalance default  %+v", o._statusCode, o.Payload)
}

func (o *EditBonusBalanceDefault) String() string {
	return fmt.Sprintf("[PUT /balance/edit][%d] editBonusBalance default  %+v", o._statusCode, o.Payload)
}

func (o *EditBonusBalanceDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *EditBonusBalanceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
EditBonusBalanceBody edit bonus balance body
swagger:model EditBonusBalanceBody
*/
type EditBonusBalanceBody struct {

	// data
	Data *models.BalanceAdd `json:"data,omitempty"`

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this edit bonus balance body
func (o *EditBonusBalanceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EditBonusBalanceBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this edit bonus balance body based on the context it is used
func (o *EditBonusBalanceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EditBonusBalanceBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EditBonusBalanceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EditBonusBalanceBody) UnmarshalBinary(b []byte) error {
	var res EditBonusBalanceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
