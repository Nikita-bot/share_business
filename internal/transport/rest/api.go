// Code generated by mtgroup-generator.
package api

import (
	"context"
	"net/http"
	"path"
	bonus2 "wash-bonus/internal/app/Balance"
	user2 "wash-bonus/internal/app/user"
	wash_server2 "wash-bonus/internal/app/wash_server"
	"wash-bonus/internal/dto"
	"wash-bonus/internal/firebase_auth"
	"wash-bonus/internal/transport/rest/restapi/models"
	restapi2 "wash-bonus/internal/transport/rest/restapi/restapi"
	"wash-bonus/internal/transport/rest/restapi/restapi/operations"
	standard2 "wash-bonus/internal/transport/rest/restapi/restapi/operations/standard"

	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/pkg/errors"
	"github.com/powerman/structlog"
	"github.com/rs/cors"
	"github.com/sebest/xff"
	"wash-bonus/internal/app"
	"wash-bonus/internal/def"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

// Ctx is a synonym for convenience.
type Ctx = context.Context

// Log is a synonym for convenience.
type Log = *structlog.Logger

var log = structlog.New()

type Config struct {
	Host           string
	Port           int
	BasePath       string
	AllowedOrigins string
}

type service struct {
	app           app.App
	bonusSvc      bonus2.BalanceSvc
	washServerSvc wash_server2.WashServerSvc
	userSvc       user2.UserSvc
	auth          firebase_auth.Service
}

func NewServer(appl app.App, userSvc user2.UserSvc, BalanceSvc bonus2.BalanceSvc, washServerSvc wash_server2.WashServerSvc, cfg Config, firebase firebase_auth.Service) (*restapi2.Server, error) {
	svc := &service{
		app:           appl,
		userSvc:       userSvc,
		auth:          firebase,
		bonusSvc:      BalanceSvc,
		washServerSvc: washServerSvc,
	}

	swaggerSpec, err := loads.Embedded(restapi2.SwaggerJSON, restapi2.FlatSwaggerJSON)
	if err != nil {
		return nil, errors.Wrap(err, "failed to load embedded swagger spec")
	}
	if cfg.BasePath == "" {
		cfg.BasePath = swaggerSpec.BasePath()
	}
	swaggerSpec.Spec().BasePath = cfg.BasePath

	api := operations.NewWashBonusAPI(swaggerSpec)

	api.Logger = structlog.New(structlog.KeyUnit, "swagger").Printf
	api.AuthKeyAuth = svc.auth.Auth

	api.StandardHealthCheckHandler = standard2.HealthCheckHandlerFunc(healthCheck)
	api.StandardAddTestDataHandler = standard2.AddTestDataHandlerFunc(svc.addTestData)

	setBalanceHandlers(api, svc)

	setUserHandlers(api, svc)
	setWashServerHandlers(api, svc)

	server := restapi2.NewServer(api)
	server.Host = string(cfg.Host)
	server.Port = int(cfg.Port)

	// The middleware executes before anything.
	globalMiddlewares := func(handler http.Handler) http.Handler {
		xffmw, _ := xff.Default()
		logger := makeLogger(cfg.BasePath)
		accesslog := makeAccessLog(cfg.BasePath)
		redocOpts := middleware.RedocOpts{
			BasePath: cfg.BasePath,
			SpecURL:  path.Join(cfg.BasePath, "/swagger.json"),
		}
		return xffmw.Handler(logger(noCache(recovery(accesslog(
			middleware.Spec(cfg.BasePath, restapi2.FlatSwaggerJSON,
				middleware.Redoc(redocOpts,
					handler)))))))
	}
	// The middleware executes after serving /swagger.json and routing,
	// but before authentication, binding and validation.
	middlewares := func(handler http.Handler) http.Handler {
		safePath := map[string]bool{}
		isSafe := func(r *http.Request) bool { return safePath[r.URL.Path] }
		forbidCSRF := makeForbidCSRF(isSafe)

		return forbidCSRF(handler)
	}

	newCORS := cors.New(cors.Options{
		AllowedOrigins:   splitCommaSeparatedStr(cfg.AllowedOrigins),
		AllowedMethods:   []string{"POST", "PUT", "GET", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"*"},
		AllowCredentials: true,
		// Enable Debugging for testing, consider disabling in production
		Debug: true,
	})
	newCORS.Log = cors.Logger(structlog.New(structlog.KeyUnit, "CORS"))
	handleCORS := newCORS.Handler

	server.SetHandler(handleCORS(globalMiddlewares(api.Serve(middlewares))))

	return server, nil
}

func healthCheck(params standard2.HealthCheckParams, profile interface{}) middleware.Responder {
	return standard2.NewHealthCheckOK().WithPayload(&standard2.HealthCheckOKBody{Ok: true})
}

func (svc *service) addTestData(params standard2.AddTestDataParams, profile interface{}) middleware.Responder {
	prof := profile.(*firebase_auth.FirebaseProfile)
	err := svc.app.AddTestData(dto.ToAppIdentityProfile(*prof))
	switch {
	default:
		log.PrintErr("AddTestData server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return standard2.NewAddTestDataDefault(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrAccessDenied):
		log.Info("AddTestData client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
		return standard2.NewAddTestDataDefault(codeForbidden.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeForbidden.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("AddTestData ok")
		return standard2.NewAddTestDataOK()
	}
}
