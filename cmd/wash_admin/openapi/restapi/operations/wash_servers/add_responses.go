// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"wash_admin/openapi/models"
)

// AddNoContentCode is the HTTP code returned for type AddNoContent
const AddNoContentCode int = 204

/*
AddNoContent Success creation

swagger:response addNoContent
*/
type AddNoContent struct {
}

// NewAddNoContent creates AddNoContent with default headers values
func NewAddNoContent() *AddNoContent {

	return &AddNoContent{}
}

// WriteResponse to the client
func (o *AddNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *AddNoContent) AddResponder() {}

// AddBadRequestCode is the HTTP code returned for type AddBadRequest
const AddBadRequestCode int = 400

/*
AddBadRequest Bad request

swagger:response addBadRequest
*/
type AddBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddBadRequest creates AddBadRequest with default headers values
func NewAddBadRequest() *AddBadRequest {

	return &AddBadRequest{}
}

// WithPayload adds the payload to the add bad request response
func (o *AddBadRequest) WithPayload(payload *models.Error) *AddBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add bad request response
func (o *AddBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *AddBadRequest) AddResponder() {}

// AddInternalServerErrorCode is the HTTP code returned for type AddInternalServerError
const AddInternalServerErrorCode int = 500

/*
AddInternalServerError Internal error

swagger:response addInternalServerError
*/
type AddInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddInternalServerError creates AddInternalServerError with default headers values
func NewAddInternalServerError() *AddInternalServerError {

	return &AddInternalServerError{}
}

// WithPayload adds the payload to the add internal server error response
func (o *AddInternalServerError) WithPayload(payload *models.Error) *AddInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add internal server error response
func (o *AddInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *AddInternalServerError) AddResponder() {}

type AddNotImplementedResponder struct {
	middleware.Responder
}

func (*AddNotImplementedResponder) AddResponder() {}

func AddNotImplemented() AddResponder {
	return &AddNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.Add has not yet been implemented",
		),
	}
}

type AddResponder interface {
	middleware.Responder
	AddResponder()
}
