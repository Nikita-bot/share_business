// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"wash_bonus/openapi/models"
)

// PostSessionNoContentCode is the HTTP code returned for type PostSessionNoContent
const PostSessionNoContentCode int = 204

/*
PostSessionNoContent OK

swagger:response postSessionNoContent
*/
type PostSessionNoContent struct {
}

// NewPostSessionNoContent creates PostSessionNoContent with default headers values
func NewPostSessionNoContent() *PostSessionNoContent {

	return &PostSessionNoContent{}
}

// WriteResponse to the client
func (o *PostSessionNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *PostSessionNoContent) PostSessionResponder() {}

// PostSessionForbiddenCode is the HTTP code returned for type PostSessionForbidden
const PostSessionForbiddenCode int = 403

/*
PostSessionForbidden Forbidden

swagger:response postSessionForbidden
*/
type PostSessionForbidden struct {
}

// NewPostSessionForbidden creates PostSessionForbidden with default headers values
func NewPostSessionForbidden() *PostSessionForbidden {

	return &PostSessionForbidden{}
}

// WriteResponse to the client
func (o *PostSessionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

func (o *PostSessionForbidden) PostSessionResponder() {}

// PostSessionNotFoundCode is the HTTP code returned for type PostSessionNotFound
const PostSessionNotFoundCode int = 404

/*
PostSessionNotFound Session not found

swagger:response postSessionNotFound
*/
type PostSessionNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostSessionNotFound creates PostSessionNotFound with default headers values
func NewPostSessionNotFound() *PostSessionNotFound {

	return &PostSessionNotFound{}
}

// WithPayload adds the payload to the post session not found response
func (o *PostSessionNotFound) WithPayload(payload *models.Error) *PostSessionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post session not found response
func (o *PostSessionNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSessionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PostSessionNotFound) PostSessionResponder() {}

// PostSessionInternalServerErrorCode is the HTTP code returned for type PostSessionInternalServerError
const PostSessionInternalServerErrorCode int = 500

/*
PostSessionInternalServerError Internal error

swagger:response postSessionInternalServerError
*/
type PostSessionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostSessionInternalServerError creates PostSessionInternalServerError with default headers values
func NewPostSessionInternalServerError() *PostSessionInternalServerError {

	return &PostSessionInternalServerError{}
}

// WithPayload adds the payload to the post session internal server error response
func (o *PostSessionInternalServerError) WithPayload(payload *models.Error) *PostSessionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post session internal server error response
func (o *PostSessionInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSessionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PostSessionInternalServerError) PostSessionResponder() {}

type PostSessionNotImplementedResponder struct {
	middleware.Responder
}

func (*PostSessionNotImplementedResponder) PostSessionResponder() {}

func PostSessionNotImplemented() PostSessionResponder {
	return &PostSessionNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.PostSession has not yet been implemented",
		),
	}
}

type PostSessionResponder interface {
	middleware.Responder
	PostSessionResponder()
}
