// Code generated by go-swagger; DO NOT EDIT.

package bonus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"wash_bonus/internal/app"
)

// UseHandlerFunc turns a function with the right signature into a use handler
type UseHandlerFunc func(UseParams, *app.Auth) UseResponder

// Handle executing the request and returning a response
func (fn UseHandlerFunc) Handle(params UseParams, principal *app.Auth) UseResponder {
	return fn(params, principal)
}

// UseHandler interface for that can handle valid use params
type UseHandler interface {
	Handle(UseParams, *app.Auth) UseResponder
}

// NewUse creates a new http.Handler for the use operation
func NewUse(ctx *middleware.Context, handler UseHandler) *Use {
	return &Use{Context: ctx, Handler: handler}
}

/*
	Use swagger:route POST /use-bonuses bonus use

Use use API
*/
type Use struct {
	Context *middleware.Context
	Handler UseHandler
}

func (o *Use) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUseParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.Auth
	if uprinc != nil {
		principal = uprinc.(*app.Auth) // this is really a app.Auth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
