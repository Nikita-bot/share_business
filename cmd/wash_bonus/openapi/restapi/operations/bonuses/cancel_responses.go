// Code generated by go-swagger; DO NOT EDIT.

package bonuses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"wash_bonus/openapi/models"
)

// CancelNoContentCode is the HTTP code returned for type CancelNoContent
const CancelNoContentCode int = 204

/*
CancelNoContent OK

swagger:response cancelNoContent
*/
type CancelNoContent struct {

	/*
	  In: Body
	*/
	Payload *models.Profile `json:"body,omitempty"`
}

// NewCancelNoContent creates CancelNoContent with default headers values
func NewCancelNoContent() *CancelNoContent {

	return &CancelNoContent{}
}

// WithPayload adds the payload to the cancel no content response
func (o *CancelNoContent) WithPayload(payload *models.Profile) *CancelNoContent {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cancel no content response
func (o *CancelNoContent) SetPayload(payload *models.Profile) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CancelNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CancelNoContent) CancelResponder() {}

// CancelBadRequestCode is the HTTP code returned for type CancelBadRequest
const CancelBadRequestCode int = 400

/*
CancelBadRequest Unable to cancel

swagger:response cancelBadRequest
*/
type CancelBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCancelBadRequest creates CancelBadRequest with default headers values
func NewCancelBadRequest() *CancelBadRequest {

	return &CancelBadRequest{}
}

// WithPayload adds the payload to the cancel bad request response
func (o *CancelBadRequest) WithPayload(payload *models.Error) *CancelBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cancel bad request response
func (o *CancelBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CancelBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CancelBadRequest) CancelResponder() {}

// CancelInternalServerErrorCode is the HTTP code returned for type CancelInternalServerError
const CancelInternalServerErrorCode int = 500

/*
CancelInternalServerError Internal error

swagger:response cancelInternalServerError
*/
type CancelInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCancelInternalServerError creates CancelInternalServerError with default headers values
func NewCancelInternalServerError() *CancelInternalServerError {

	return &CancelInternalServerError{}
}

// WithPayload adds the payload to the cancel internal server error response
func (o *CancelInternalServerError) WithPayload(payload *models.Error) *CancelInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cancel internal server error response
func (o *CancelInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CancelInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CancelInternalServerError) CancelResponder() {}

type CancelNotImplementedResponder struct {
	middleware.Responder
}

func (*CancelNotImplementedResponder) CancelResponder() {}

func CancelNotImplemented() CancelResponder {
	return &CancelNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.Cancel has not yet been implemented",
		),
	}
}

type CancelResponder interface {
	middleware.Responder
	CancelResponder()
}
