// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"wash_bonus/openapi/models"
)

// GetReader is a Reader for the Get structure.
type GetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOK creates a GetOK with default headers values
func NewGetOK() *GetOK {
	return &GetOK{}
}

/*
GetOK describes a response with status code 200, with default header values.

OK
*/
type GetOK struct {
	Payload *models.Profile
}

// IsSuccess returns true when this get o k response has a 2xx status code
func (o *GetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get o k response has a 3xx status code
func (o *GetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o k response has a 4xx status code
func (o *GetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get o k response has a 5xx status code
func (o *GetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get o k response a status code equal to that given
func (o *GetOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetOK) Error() string {
	return fmt.Sprintf("[GET /profile][%d] getOK  %+v", 200, o.Payload)
}

func (o *GetOK) String() string {
	return fmt.Sprintf("[GET /profile][%d] getOK  %+v", 200, o.Payload)
}

func (o *GetOK) GetPayload() *models.Profile {
	return o.Payload
}

func (o *GetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Profile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotFound creates a GetNotFound with default headers values
func NewGetNotFound() *GetNotFound {
	return &GetNotFound{}
}

/*
GetNotFound describes a response with status code 404, with default header values.

Profile not exists
*/
type GetNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get not found response has a 2xx status code
func (o *GetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get not found response has a 3xx status code
func (o *GetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get not found response has a 4xx status code
func (o *GetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get not found response has a 5xx status code
func (o *GetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get not found response a status code equal to that given
func (o *GetNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetNotFound) Error() string {
	return fmt.Sprintf("[GET /profile][%d] getNotFound  %+v", 404, o.Payload)
}

func (o *GetNotFound) String() string {
	return fmt.Sprintf("[GET /profile][%d] getNotFound  %+v", 404, o.Payload)
}

func (o *GetNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternalServerError creates a GetInternalServerError with default headers values
func NewGetInternalServerError() *GetInternalServerError {
	return &GetInternalServerError{}
}

/*
GetInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type GetInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get internal server error response has a 2xx status code
func (o *GetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get internal server error response has a 3xx status code
func (o *GetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get internal server error response has a 4xx status code
func (o *GetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get internal server error response has a 5xx status code
func (o *GetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get internal server error response a status code equal to that given
func (o *GetInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /profile][%d] getInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInternalServerError) String() string {
	return fmt.Sprintf("[GET /profile][%d] getInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
