// Code generated by go-swagger; DO NOT EDIT.

package bonus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"wash_bonus/openapi/models"
)

// UseReader is a Reader for the Use structure.
type UseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUseNoContent creates a UseNoContent with default headers values
func NewUseNoContent() *UseNoContent {
	return &UseNoContent{}
}

/*
UseNoContent describes a response with status code 204, with default header values.

OK
*/
type UseNoContent struct {
	Payload *models.Profile
}

// IsSuccess returns true when this use no content response has a 2xx status code
func (o *UseNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this use no content response has a 3xx status code
func (o *UseNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this use no content response has a 4xx status code
func (o *UseNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this use no content response has a 5xx status code
func (o *UseNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this use no content response a status code equal to that given
func (o *UseNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UseNoContent) Error() string {
	return fmt.Sprintf("[POST /use-bonuses][%d] useNoContent  %+v", 204, o.Payload)
}

func (o *UseNoContent) String() string {
	return fmt.Sprintf("[POST /use-bonuses][%d] useNoContent  %+v", 204, o.Payload)
}

func (o *UseNoContent) GetPayload() *models.Profile {
	return o.Payload
}

func (o *UseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Profile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUseNotFound creates a UseNotFound with default headers values
func NewUseNotFound() *UseNotFound {
	return &UseNotFound{}
}

/*
UseNotFound describes a response with status code 404, with default header values.

Profile not exists
*/
type UseNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this use not found response has a 2xx status code
func (o *UseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this use not found response has a 3xx status code
func (o *UseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this use not found response has a 4xx status code
func (o *UseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this use not found response has a 5xx status code
func (o *UseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this use not found response a status code equal to that given
func (o *UseNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UseNotFound) Error() string {
	return fmt.Sprintf("[POST /use-bonuses][%d] useNotFound  %+v", 404, o.Payload)
}

func (o *UseNotFound) String() string {
	return fmt.Sprintf("[POST /use-bonuses][%d] useNotFound  %+v", 404, o.Payload)
}

func (o *UseNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUseInternalServerError creates a UseInternalServerError with default headers values
func NewUseInternalServerError() *UseInternalServerError {
	return &UseInternalServerError{}
}

/*
UseInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type UseInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this use internal server error response has a 2xx status code
func (o *UseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this use internal server error response has a 3xx status code
func (o *UseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this use internal server error response has a 4xx status code
func (o *UseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this use internal server error response has a 5xx status code
func (o *UseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this use internal server error response a status code equal to that given
func (o *UseInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UseInternalServerError) Error() string {
	return fmt.Sprintf("[POST /use-bonuses][%d] useInternalServerError  %+v", 500, o.Payload)
}

func (o *UseInternalServerError) String() string {
	return fmt.Sprintf("[POST /use-bonuses][%d] useInternalServerError  %+v", 500, o.Payload)
}

func (o *UseInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
