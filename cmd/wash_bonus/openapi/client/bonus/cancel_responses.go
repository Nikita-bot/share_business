// Code generated by go-swagger; DO NOT EDIT.

package bonus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"wash_bonus/openapi/models"
)

// CancelReader is a Reader for the Cancel structure.
type CancelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewCancelNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelNoContent creates a CancelNoContent with default headers values
func NewCancelNoContent() *CancelNoContent {
	return &CancelNoContent{}
}

/*
CancelNoContent describes a response with status code 204, with default header values.

OK
*/
type CancelNoContent struct {
	Payload *models.Profile
}

// IsSuccess returns true when this cancel no content response has a 2xx status code
func (o *CancelNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel no content response has a 3xx status code
func (o *CancelNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel no content response has a 4xx status code
func (o *CancelNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel no content response has a 5xx status code
func (o *CancelNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel no content response a status code equal to that given
func (o *CancelNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *CancelNoContent) Error() string {
	return fmt.Sprintf("[POST /cancel-use][%d] cancelNoContent  %+v", 204, o.Payload)
}

func (o *CancelNoContent) String() string {
	return fmt.Sprintf("[POST /cancel-use][%d] cancelNoContent  %+v", 204, o.Payload)
}

func (o *CancelNoContent) GetPayload() *models.Profile {
	return o.Payload
}

func (o *CancelNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Profile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelBadRequest creates a CancelBadRequest with default headers values
func NewCancelBadRequest() *CancelBadRequest {
	return &CancelBadRequest{}
}

/*
CancelBadRequest describes a response with status code 400, with default header values.

Unable to cancel
*/
type CancelBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this cancel bad request response has a 2xx status code
func (o *CancelBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel bad request response has a 3xx status code
func (o *CancelBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel bad request response has a 4xx status code
func (o *CancelBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel bad request response has a 5xx status code
func (o *CancelBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel bad request response a status code equal to that given
func (o *CancelBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CancelBadRequest) Error() string {
	return fmt.Sprintf("[POST /cancel-use][%d] cancelBadRequest  %+v", 400, o.Payload)
}

func (o *CancelBadRequest) String() string {
	return fmt.Sprintf("[POST /cancel-use][%d] cancelBadRequest  %+v", 400, o.Payload)
}

func (o *CancelBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInternalServerError creates a CancelInternalServerError with default headers values
func NewCancelInternalServerError() *CancelInternalServerError {
	return &CancelInternalServerError{}
}

/*
CancelInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type CancelInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this cancel internal server error response has a 2xx status code
func (o *CancelInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel internal server error response has a 3xx status code
func (o *CancelInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel internal server error response has a 4xx status code
func (o *CancelInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel internal server error response has a 5xx status code
func (o *CancelInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel internal server error response a status code equal to that given
func (o *CancelInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CancelInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cancel-use][%d] cancelInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelInternalServerError) String() string {
	return fmt.Sprintf("[POST /cancel-use][%d] cancelInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
