// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: intapi/grpc.proto

package intapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WashBonusClient is the client API for WashBonus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WashBonusClient interface {
	InitConn(ctx context.Context, in *InitConnRequest, opts ...grpc.CallOption) (*InitConnResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Begin(ctx context.Context, in *BeginRequest, opts ...grpc.CallOption) (*BeginAnswer, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshAnswer, error)
	End(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*FinishAnswer, error)
	EnterMoney(ctx context.Context, in *EnterMoneyRequest, opts ...grpc.CallOption) (*EnterMoneyAnswer, error)
}

type washBonusClient struct {
	cc grpc.ClientConnInterface
}

func NewWashBonusClient(cc grpc.ClientConnInterface) WashBonusClient {
	return &washBonusClient{cc}
}

func (c *washBonusClient) InitConn(ctx context.Context, in *InitConnRequest, opts ...grpc.CallOption) (*InitConnResponse, error) {
	out := new(InitConnResponse)
	err := c.cc.Invoke(ctx, "/WashBonus/InitConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *washBonusClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/WashBonus/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *washBonusClient) Begin(ctx context.Context, in *BeginRequest, opts ...grpc.CallOption) (*BeginAnswer, error) {
	out := new(BeginAnswer)
	err := c.cc.Invoke(ctx, "/WashBonus/Begin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *washBonusClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshAnswer, error) {
	out := new(RefreshAnswer)
	err := c.cc.Invoke(ctx, "/WashBonus/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *washBonusClient) End(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*FinishAnswer, error) {
	out := new(FinishAnswer)
	err := c.cc.Invoke(ctx, "/WashBonus/End", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *washBonusClient) EnterMoney(ctx context.Context, in *EnterMoneyRequest, opts ...grpc.CallOption) (*EnterMoneyAnswer, error) {
	out := new(EnterMoneyAnswer)
	err := c.cc.Invoke(ctx, "/WashBonus/EnterMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WashBonusServer is the server API for WashBonus service.
// All implementations must embed UnimplementedWashBonusServer
// for forward compatibility
type WashBonusServer interface {
	InitConn(context.Context, *InitConnRequest) (*InitConnResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Begin(context.Context, *BeginRequest) (*BeginAnswer, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshAnswer, error)
	End(context.Context, *FinishRequest) (*FinishAnswer, error)
	EnterMoney(context.Context, *EnterMoneyRequest) (*EnterMoneyAnswer, error)
	mustEmbedUnimplementedWashBonusServer()
}

// UnimplementedWashBonusServer must be embedded to have forward compatible implementations.
type UnimplementedWashBonusServer struct {
}

func (UnimplementedWashBonusServer) InitConn(context.Context, *InitConnRequest) (*InitConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitConn not implemented")
}
func (UnimplementedWashBonusServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedWashBonusServer) Begin(context.Context, *BeginRequest) (*BeginAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Begin not implemented")
}
func (UnimplementedWashBonusServer) Refresh(context.Context, *RefreshRequest) (*RefreshAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedWashBonusServer) End(context.Context, *FinishRequest) (*FinishAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method End not implemented")
}
func (UnimplementedWashBonusServer) EnterMoney(context.Context, *EnterMoneyRequest) (*EnterMoneyAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterMoney not implemented")
}
func (UnimplementedWashBonusServer) mustEmbedUnimplementedWashBonusServer() {}

// UnsafeWashBonusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WashBonusServer will
// result in compilation errors.
type UnsafeWashBonusServer interface {
	mustEmbedUnimplementedWashBonusServer()
}

func RegisterWashBonusServer(s grpc.ServiceRegistrar, srv WashBonusServer) {
	s.RegisterService(&WashBonus_ServiceDesc, srv)
}

func _WashBonus_InitConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashBonusServer).InitConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WashBonus/InitConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashBonusServer).InitConn(ctx, req.(*InitConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WashBonus_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashBonusServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WashBonus/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashBonusServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WashBonus_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashBonusServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WashBonus/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashBonusServer).Begin(ctx, req.(*BeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WashBonus_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashBonusServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WashBonus/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashBonusServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WashBonus_End_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashBonusServer).End(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WashBonus/End",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashBonusServer).End(ctx, req.(*FinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WashBonus_EnterMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashBonusServer).EnterMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WashBonus/EnterMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashBonusServer).EnterMoney(ctx, req.(*EnterMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WashBonus_ServiceDesc is the grpc.ServiceDesc for WashBonus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WashBonus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WashBonus",
	HandlerType: (*WashBonusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitConn",
			Handler:    _WashBonus_InitConn_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _WashBonus_HealthCheck_Handler,
		},
		{
			MethodName: "Begin",
			Handler:    _WashBonus_Begin_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _WashBonus_Refresh_Handler,
		},
		{
			MethodName: "End",
			Handler:    _WashBonus_End_Handler,
		},
		{
			MethodName: "EnterMoney",
			Handler:    _WashBonus_EnterMoney_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intapi/grpc.proto",
}
