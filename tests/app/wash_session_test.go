// Code generated by mtgroup-generator.
package app

import (
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/powerman/check"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func TestGetWashSession(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().GetWashSessionAccessManager(gomock.Any()).Return(true)
	mockRepo.EXPECT().GetWashSession(gomock.Any(), gomock.Any()).Return(testWashSession1, nil)
	b, err := a.GetWashSession(profile, testWashSession1.ID)
	t.Nil(err)
	t.DeepEqual(testWashSession1, b)
}

func TestAddWashSession(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().AddWashSessionAccessManager(gomock.Any()).Return(true)
	mockRepo.EXPECT().AddWashSession(gomock.Any(), gomock.Any(), gomock.Any()).Return(testWashSession1, nil)
	b, err := a.AddWashSession(profile, testWashSession1)
	t.Nil(err)
	t.DeepEqual(testWashSession1, b)
}

func TestEditWashSession(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().EditWashSessionAccessManager(gomock.Any()).Return(true)
	mockRepo.EXPECT().EditWashSession(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)
	err := a.EditWashSession(profile, testWashSession1.ID, testWashSession1)
	t.Nil(err)
}

func TestDeleteWashSession(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().DeleteWashSessionAccessManager(gomock.Any()).Return(true)
	mockRepo.EXPECT().DeleteWashSession(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)
	err := a.DeleteWashSession(profile, testWashSession1.ID)
	t.Nil(err)
}

func TestListWashSession(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().ListWashSessionAccessManager(gomock.Any()).Return(true)
	mockRepo.EXPECT().ListWashSession(gomock.Any(), gomock.Any()).Return(testWashSessions, []string{}, nil)
	b, _, err := a.ListWashSession(profile, listParams)
	t.Nil(err)
	t.DeepEqual(testWashSessions, b)
}
