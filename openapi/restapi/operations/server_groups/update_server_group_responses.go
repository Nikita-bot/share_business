// Code generated by go-swagger; DO NOT EDIT.

package server_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"washBonus/openapi/models"
)

// UpdateServerGroupOKCode is the HTTP code returned for type UpdateServerGroupOK
const UpdateServerGroupOKCode int = 200

/*
UpdateServerGroupOK Successfull updated

swagger:response updateServerGroupOK
*/
type UpdateServerGroupOK struct {

	/*
	  In: Body
	*/
	Payload *models.ServerGroup `json:"body,omitempty"`
}

// NewUpdateServerGroupOK creates UpdateServerGroupOK with default headers values
func NewUpdateServerGroupOK() *UpdateServerGroupOK {

	return &UpdateServerGroupOK{}
}

// WithPayload adds the payload to the update server group o k response
func (o *UpdateServerGroupOK) WithPayload(payload *models.ServerGroup) *UpdateServerGroupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update server group o k response
func (o *UpdateServerGroupOK) SetPayload(payload *models.ServerGroup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServerGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *UpdateServerGroupOK) UpdateServerGroupResponder() {}

// UpdateServerGroupBadRequestCode is the HTTP code returned for type UpdateServerGroupBadRequest
const UpdateServerGroupBadRequestCode int = 400

/*
UpdateServerGroupBadRequest Bad request

swagger:response updateServerGroupBadRequest
*/
type UpdateServerGroupBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateServerGroupBadRequest creates UpdateServerGroupBadRequest with default headers values
func NewUpdateServerGroupBadRequest() *UpdateServerGroupBadRequest {

	return &UpdateServerGroupBadRequest{}
}

// WithPayload adds the payload to the update server group bad request response
func (o *UpdateServerGroupBadRequest) WithPayload(payload *models.Error) *UpdateServerGroupBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update server group bad request response
func (o *UpdateServerGroupBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServerGroupBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *UpdateServerGroupBadRequest) UpdateServerGroupResponder() {}

// UpdateServerGroupForbiddenCode is the HTTP code returned for type UpdateServerGroupForbidden
const UpdateServerGroupForbiddenCode int = 403

/*
UpdateServerGroupForbidden Forbidden

swagger:response updateServerGroupForbidden
*/
type UpdateServerGroupForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateServerGroupForbidden creates UpdateServerGroupForbidden with default headers values
func NewUpdateServerGroupForbidden() *UpdateServerGroupForbidden {

	return &UpdateServerGroupForbidden{}
}

// WithPayload adds the payload to the update server group forbidden response
func (o *UpdateServerGroupForbidden) WithPayload(payload *models.Error) *UpdateServerGroupForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update server group forbidden response
func (o *UpdateServerGroupForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServerGroupForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *UpdateServerGroupForbidden) UpdateServerGroupResponder() {}

// UpdateServerGroupNotFoundCode is the HTTP code returned for type UpdateServerGroupNotFound
const UpdateServerGroupNotFoundCode int = 404

/*
UpdateServerGroupNotFound Not Found

swagger:response updateServerGroupNotFound
*/
type UpdateServerGroupNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateServerGroupNotFound creates UpdateServerGroupNotFound with default headers values
func NewUpdateServerGroupNotFound() *UpdateServerGroupNotFound {

	return &UpdateServerGroupNotFound{}
}

// WithPayload adds the payload to the update server group not found response
func (o *UpdateServerGroupNotFound) WithPayload(payload *models.Error) *UpdateServerGroupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update server group not found response
func (o *UpdateServerGroupNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServerGroupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *UpdateServerGroupNotFound) UpdateServerGroupResponder() {}

// UpdateServerGroupInternalServerErrorCode is the HTTP code returned for type UpdateServerGroupInternalServerError
const UpdateServerGroupInternalServerErrorCode int = 500

/*
UpdateServerGroupInternalServerError Internal error

swagger:response updateServerGroupInternalServerError
*/
type UpdateServerGroupInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateServerGroupInternalServerError creates UpdateServerGroupInternalServerError with default headers values
func NewUpdateServerGroupInternalServerError() *UpdateServerGroupInternalServerError {

	return &UpdateServerGroupInternalServerError{}
}

// WithPayload adds the payload to the update server group internal server error response
func (o *UpdateServerGroupInternalServerError) WithPayload(payload *models.Error) *UpdateServerGroupInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update server group internal server error response
func (o *UpdateServerGroupInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServerGroupInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *UpdateServerGroupInternalServerError) UpdateServerGroupResponder() {}

type UpdateServerGroupNotImplementedResponder struct {
	middleware.Responder
}

func (*UpdateServerGroupNotImplementedResponder) UpdateServerGroupResponder() {}

func UpdateServerGroupNotImplemented() UpdateServerGroupResponder {
	return &UpdateServerGroupNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.UpdateServerGroup has not yet been implemented",
		),
	}
}

type UpdateServerGroupResponder interface {
	middleware.Responder
	UpdateServerGroupResponder()
}
