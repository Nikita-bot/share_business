// Code generated by go-swagger; DO NOT EDIT.

package server_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"washBonus/openapi/models"
)

// NewGetServerGroupsParams creates a new GetServerGroupsParams object
//
// There are no default values defined in the spec.
func NewGetServerGroupsParams() GetServerGroupsParams {

	return GetServerGroupsParams{}
}

// GetServerGroupsParams contains all the bound params for the get server groups operation
// typically these are obtained from a http.Request
//
// swagger:parameters getServerGroups
type GetServerGroupsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: body
	*/
	Body *models.Pagination
	/*
	  In: query
	*/
	OrganizationID *strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetServerGroupsParams() beforehand.
func (o *GetServerGroupsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Pagination
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("body", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	}

	qOrganizationID, qhkOrganizationID, _ := qs.GetOK("organizationId")
	if err := o.bindOrganizationID(qOrganizationID, qhkOrganizationID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindOrganizationID binds and validates parameter OrganizationID from query.
func (o *GetServerGroupsParams) bindOrganizationID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("organizationId", "query", "strfmt.UUID", raw)
	}
	o.OrganizationID = (value.(*strfmt.UUID))

	if err := o.validateOrganizationID(formats); err != nil {
		return err
	}

	return nil
}

// validateOrganizationID carries on validations for parameter OrganizationID
func (o *GetServerGroupsParams) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.FormatOf("organizationId", "query", "uuid", o.OrganizationID.String(), formats); err != nil {
		return err
	}
	return nil
}
