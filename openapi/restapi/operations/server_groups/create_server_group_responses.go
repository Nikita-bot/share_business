// Code generated by go-swagger; DO NOT EDIT.

package server_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"washBonus/openapi/models"
)

// CreateServerGroupOKCode is the HTTP code returned for type CreateServerGroupOK
const CreateServerGroupOKCode int = 200

/*
CreateServerGroupOK Successfull created

swagger:response createServerGroupOK
*/
type CreateServerGroupOK struct {

	/*
	  In: Body
	*/
	Payload *models.ServerGroup `json:"body,omitempty"`
}

// NewCreateServerGroupOK creates CreateServerGroupOK with default headers values
func NewCreateServerGroupOK() *CreateServerGroupOK {

	return &CreateServerGroupOK{}
}

// WithPayload adds the payload to the create server group o k response
func (o *CreateServerGroupOK) WithPayload(payload *models.ServerGroup) *CreateServerGroupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create server group o k response
func (o *CreateServerGroupOK) SetPayload(payload *models.ServerGroup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServerGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CreateServerGroupOK) CreateServerGroupResponder() {}

// CreateServerGroupBadRequestCode is the HTTP code returned for type CreateServerGroupBadRequest
const CreateServerGroupBadRequestCode int = 400

/*
CreateServerGroupBadRequest Bad request

swagger:response createServerGroupBadRequest
*/
type CreateServerGroupBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateServerGroupBadRequest creates CreateServerGroupBadRequest with default headers values
func NewCreateServerGroupBadRequest() *CreateServerGroupBadRequest {

	return &CreateServerGroupBadRequest{}
}

// WithPayload adds the payload to the create server group bad request response
func (o *CreateServerGroupBadRequest) WithPayload(payload *models.Error) *CreateServerGroupBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create server group bad request response
func (o *CreateServerGroupBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServerGroupBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CreateServerGroupBadRequest) CreateServerGroupResponder() {}

// CreateServerGroupForbiddenCode is the HTTP code returned for type CreateServerGroupForbidden
const CreateServerGroupForbiddenCode int = 403

/*
CreateServerGroupForbidden Forbidden

swagger:response createServerGroupForbidden
*/
type CreateServerGroupForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateServerGroupForbidden creates CreateServerGroupForbidden with default headers values
func NewCreateServerGroupForbidden() *CreateServerGroupForbidden {

	return &CreateServerGroupForbidden{}
}

// WithPayload adds the payload to the create server group forbidden response
func (o *CreateServerGroupForbidden) WithPayload(payload *models.Error) *CreateServerGroupForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create server group forbidden response
func (o *CreateServerGroupForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServerGroupForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CreateServerGroupForbidden) CreateServerGroupResponder() {}

// CreateServerGroupNotFoundCode is the HTTP code returned for type CreateServerGroupNotFound
const CreateServerGroupNotFoundCode int = 404

/*
CreateServerGroupNotFound Not Found

swagger:response createServerGroupNotFound
*/
type CreateServerGroupNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateServerGroupNotFound creates CreateServerGroupNotFound with default headers values
func NewCreateServerGroupNotFound() *CreateServerGroupNotFound {

	return &CreateServerGroupNotFound{}
}

// WithPayload adds the payload to the create server group not found response
func (o *CreateServerGroupNotFound) WithPayload(payload *models.Error) *CreateServerGroupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create server group not found response
func (o *CreateServerGroupNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServerGroupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CreateServerGroupNotFound) CreateServerGroupResponder() {}

// CreateServerGroupInternalServerErrorCode is the HTTP code returned for type CreateServerGroupInternalServerError
const CreateServerGroupInternalServerErrorCode int = 500

/*
CreateServerGroupInternalServerError Internal error

swagger:response createServerGroupInternalServerError
*/
type CreateServerGroupInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateServerGroupInternalServerError creates CreateServerGroupInternalServerError with default headers values
func NewCreateServerGroupInternalServerError() *CreateServerGroupInternalServerError {

	return &CreateServerGroupInternalServerError{}
}

// WithPayload adds the payload to the create server group internal server error response
func (o *CreateServerGroupInternalServerError) WithPayload(payload *models.Error) *CreateServerGroupInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create server group internal server error response
func (o *CreateServerGroupInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServerGroupInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *CreateServerGroupInternalServerError) CreateServerGroupResponder() {}

type CreateServerGroupNotImplementedResponder struct {
	middleware.Responder
}

func (*CreateServerGroupNotImplementedResponder) CreateServerGroupResponder() {}

func CreateServerGroupNotImplemented() CreateServerGroupResponder {
	return &CreateServerGroupNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.CreateServerGroup has not yet been implemented",
		),
	}
}

type CreateServerGroupResponder interface {
	middleware.Responder
	CreateServerGroupResponder()
}
