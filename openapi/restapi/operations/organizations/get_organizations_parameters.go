// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"washBonus/openapi/models"
)

// NewGetOrganizationsParams creates a new GetOrganizationsParams object
//
// There are no default values defined in the spec.
func NewGetOrganizationsParams() GetOrganizationsParams {

	return GetOrganizationsParams{}
}

// GetOrganizationsParams contains all the bound params for the get organizations operation
// typically these are obtained from a http.Request
//
// swagger:parameters getOrganizations
type GetOrganizationsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: body
	*/
	Body *models.Pagination
	/*
	  In: query
	  Collection Format: csv
	*/
	Ids []strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetOrganizationsParams() beforehand.
func (o *GetOrganizationsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Pagination
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("body", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	}

	qIds, qhkIds, _ := qs.GetOK("ids")
	if err := o.bindIds(qIds, qhkIds, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIds binds and validates array parameter Ids from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *GetOrganizationsParams) bindIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvIds string
	if len(rawData) > 0 {
		qvIds = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	idsIC := swag.SplitByFormat(qvIds, "csv")
	if len(idsIC) == 0 {
		return nil
	}

	var idsIR []strfmt.UUID
	for i, idsIV := range idsIC {
		// items.Format: "uuid"
		value, err := formats.Parse("uuid", idsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "ids", i), "query", "strfmt.UUID", value)
		}
		idsI := *(value.(*strfmt.UUID))

		if err := validate.FormatOf(fmt.Sprintf("%s.%v", "ids", i), "query", "uuid", idsI.String(), formats); err != nil {
			return err
		}
		idsIR = append(idsIR, idsI)
	}

	o.Ids = idsIR

	return nil
}
