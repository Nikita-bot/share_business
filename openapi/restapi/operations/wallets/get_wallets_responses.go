// Code generated by go-swagger; DO NOT EDIT.

package wallets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"washBonus/openapi/models"
)

// GetWalletsOKCode is the HTTP code returned for type GetWalletsOK
const GetWalletsOKCode int = 200

/*
GetWalletsOK OK

swagger:response getWalletsOK
*/
type GetWalletsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Wallet `json:"body,omitempty"`
}

// NewGetWalletsOK creates GetWalletsOK with default headers values
func NewGetWalletsOK() *GetWalletsOK {

	return &GetWalletsOK{}
}

// WithPayload adds the payload to the get wallets o k response
func (o *GetWalletsOK) WithPayload(payload []*models.Wallet) *GetWalletsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wallets o k response
func (o *GetWalletsOK) SetPayload(payload []*models.Wallet) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWalletsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Wallet, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (o *GetWalletsOK) GetWalletsResponder() {}

// GetWalletsBadRequestCode is the HTTP code returned for type GetWalletsBadRequest
const GetWalletsBadRequestCode int = 400

/*
GetWalletsBadRequest Bad request

swagger:response getWalletsBadRequest
*/
type GetWalletsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWalletsBadRequest creates GetWalletsBadRequest with default headers values
func NewGetWalletsBadRequest() *GetWalletsBadRequest {

	return &GetWalletsBadRequest{}
}

// WithPayload adds the payload to the get wallets bad request response
func (o *GetWalletsBadRequest) WithPayload(payload *models.Error) *GetWalletsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wallets bad request response
func (o *GetWalletsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWalletsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWalletsBadRequest) GetWalletsResponder() {}

// GetWalletsForbiddenCode is the HTTP code returned for type GetWalletsForbidden
const GetWalletsForbiddenCode int = 403

/*
GetWalletsForbidden Forbidden

swagger:response getWalletsForbidden
*/
type GetWalletsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWalletsForbidden creates GetWalletsForbidden with default headers values
func NewGetWalletsForbidden() *GetWalletsForbidden {

	return &GetWalletsForbidden{}
}

// WithPayload adds the payload to the get wallets forbidden response
func (o *GetWalletsForbidden) WithPayload(payload *models.Error) *GetWalletsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wallets forbidden response
func (o *GetWalletsForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWalletsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWalletsForbidden) GetWalletsResponder() {}

// GetWalletsNotFoundCode is the HTTP code returned for type GetWalletsNotFound
const GetWalletsNotFoundCode int = 404

/*
GetWalletsNotFound Not Found

swagger:response getWalletsNotFound
*/
type GetWalletsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWalletsNotFound creates GetWalletsNotFound with default headers values
func NewGetWalletsNotFound() *GetWalletsNotFound {

	return &GetWalletsNotFound{}
}

// WithPayload adds the payload to the get wallets not found response
func (o *GetWalletsNotFound) WithPayload(payload *models.Error) *GetWalletsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wallets not found response
func (o *GetWalletsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWalletsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWalletsNotFound) GetWalletsResponder() {}

// GetWalletsInternalServerErrorCode is the HTTP code returned for type GetWalletsInternalServerError
const GetWalletsInternalServerErrorCode int = 500

/*
GetWalletsInternalServerError Internal error

swagger:response getWalletsInternalServerError
*/
type GetWalletsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWalletsInternalServerError creates GetWalletsInternalServerError with default headers values
func NewGetWalletsInternalServerError() *GetWalletsInternalServerError {

	return &GetWalletsInternalServerError{}
}

// WithPayload adds the payload to the get wallets internal server error response
func (o *GetWalletsInternalServerError) WithPayload(payload *models.Error) *GetWalletsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wallets internal server error response
func (o *GetWalletsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWalletsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWalletsInternalServerError) GetWalletsResponder() {}

type GetWalletsNotImplementedResponder struct {
	middleware.Responder
}

func (*GetWalletsNotImplementedResponder) GetWalletsResponder() {}

func GetWalletsNotImplemented() GetWalletsResponder {
	return &GetWalletsNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.GetWallets has not yet been implemented",
		),
	}
}

type GetWalletsResponder interface {
	middleware.Responder
	GetWalletsResponder()
}
