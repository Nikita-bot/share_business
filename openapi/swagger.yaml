swagger: "2.0"
info:
  description: "Bonus system service for self-service car washes"
  title: wash-bonus
  version: 1.0.0
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
securityDefinitions:
  authKey:
    description: Session token inside Authorization header.
    type: apiKey
    in: header
    name: Authorization
security:
  - authKey: [ ]

paths:
  /healthCheck:
    get:
      tags:
        - Standard
      security:
        - { }
      operationId: healthCheck
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              ok:
                type: boolean

  /users:
    get:
      tags:
        - users
      security:
        - authKey: []
      operationId: getUsers
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
      responses:
        200:
          description: OK
          schema:
            type: array
            items: 
              $ref: "#/definitions/User"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/InternalError"

  /users/{userId}:
    get:
      tags:
        - users
      security:
        - authKey: []
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    patch:
      tags:
        - users
      security:
        - authKey: []
      operationId: updateUserRole
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: update
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserRoleUpdate"
      responses:
        204:
          description: OK
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /users/me:
    get:
      tags:
        - users
      security:
        - authKey: []
      operationId: getCurrentUser
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /wash-servers/{serverId}:
    get:
      tags:
        - washServers
      security:
        - authKey: []
      operationId: getWashServerById
      parameters:
        - name: serverId
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/WashServer"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    patch:
      tags:
        - washServers
      security:
        - authKey: []
      operationId: updateWashServer
      parameters:
        - name: serverId
          in: path
          required: true
          type: string
        - name: body
          in: body
          schema:
            $ref: "#/definitions/WashServerUpdate"
      responses:
        200:
          description: Success update
          schema:
            $ref: "#/definitions/WashServer"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    delete:
      tags:
        - washServers
      security:
        - authKey: []
      operationId: deleteWashServer
      parameters:
        - name: serverId
          in: path
          required: true
          type: string
      responses:
        204:
          description: OK
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /wash-servers/:
    get:
      tags:
        - washServers
      security:
        - authKey: []
      operationId: getWashServers
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/isManagedByMe'
        - name: organizationId
          in: query
          type: string
          format: uuid
        - name: groupId
          in: query
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            type: array
            items: 
              $ref: "#/definitions/WashServer"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/InternalError"
    post:
      tags:
        - washServers
      security:
        - authKey: []
      operationId: createWashServer
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/WashServerCreation"
      responses:
        200:
          description: Success creation
          schema:
            $ref: "#/definitions/WashServer"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /sessions/{sessionId}:
    get:
      tags:
        - sessions
      security:
        - authKey: [ ]
      operationId: getSessionById
      parameters:
        - name: sessionId
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Session"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /sessions/{sessionId}/bonuses:
    post:
      tags:
        - sessions
      security:
        - authKey: [ ]
      operationId: chargeBonusesOnSession
      parameters:
        - name: sessionId
          in: path
          type: string
          required: true
        - name: body
          in: body
          schema:
            $ref: "#/definitions/BonusCharge"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BonusCharge"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /sessions/{sessionId}/assign-user:
    post:
      tags:
        - sessions
      security:
        - authKey: [ ]
      operationId: assignUserToSession
      parameters:
        - name: sessionId
          in: path
          type: string
          required: true
      responses:
        204:
          description: OK
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /organizations:
    get:
      tags:
        - organizations
      operationId: getOrganizations
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/isManagedByMe'
        - name: ids
          in: query
          type: array
          items: 
            type: string
            format: uuid
          collectionFormat: csv
      responses:
        200:
          description: OK
          schema:
            type: array
            items: 
              $ref: "#/definitions/Organization"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/InternalError"
    post:
      tags:
        - organizations
      operationId: createOrganization
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/OrganizationCreation"
      responses:
        200:
          description: Successfull created
          schema:
            $ref: "#/definitions/Organization"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/InternalError"

  /organizations/{organizationId}:
    get:
      tags:
        - organizations
      operationId: getOrganizationById
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Organization"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    patch:
      tags:
        - organizations
      operationId: updateOrganization
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
          format: uuid
        - name: body
          in: body
          schema:
            $ref: "#/definitions/OrganizationUpdate"
      responses:
        200:
          description: Successfull updated
          schema:
            $ref: "#/definitions/Organization"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    delete:
      tags:
        - organizations
      operationId: deleteOrganization
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        204:
          description: OK
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /organizations/{organizationId}/users/{userId}:
    post:
      tags:
        - organizations
      operationId: assignUserToOrganization
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
          format: uuid
        - name: userId
          in: path
          required: true
          type: string
      responses:
        204:
          description: OK
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    delete:
      tags:
        - organizations
      operationId: removeUserFromOrganization
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
          format: uuid
        - name: userId
          in: path
          required: true
          type: string
      responses:
        204:
          description: OK
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /server-groups:
    get:
      tags:
        - serverGroups
      operationId: getServerGroups
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/isManagedByMe'
        - name: organizationId
          in: query
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            type: array
            items: 
              $ref: "#/definitions/ServerGroup"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/InternalError"
    post:
      tags:
        - serverGroups
      operationId: createServerGroup
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/ServerGroupCreation"
      responses:
        200:
          description: Successfull created
          schema:
            $ref: "#/definitions/ServerGroup"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/InternalError"

  /server-groups/{groupId}:
    get:
      tags:
        - serverGroups
      operationId: getServerGroupById
      parameters:
        - name: groupId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ServerGroup"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    patch:
      tags:
        - serverGroups
      operationId: updateServerGroup
      parameters:
        - name: groupId
          in: path
          required: true
          type: string
          format: uuid
        - name: body
          in: body
          schema:
            $ref: "#/definitions/ServerGroupUpdate"
      responses:
        200:
          description: Successfull updated
          schema:
            $ref: "#/definitions/ServerGroup"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    delete:
      tags:
        - serverGroups
      operationId: deleteServerGroup
      parameters:
        - name: groupId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        204:
          description: OK
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    
  /server-groups/{groupId}/wash-servers/{serverId}:
    post:
      tags:
        - washServers
      operationId: assignServerToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          type: string
          format: uuid
        - name: serverId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        204:
          description: OK
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /wallets:
    get:
      tags:
        - wallets
      operationId: getWallets
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
      responses:
        200:
          description: OK
          schema:
            type: array
            items: 
              $ref: "#/definitions/Wallet"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /wallets/by-organization/{id}:
    get:
      tags:
        - wallets
      operationId: getWalletByOrganizationId
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Wallet"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

parameters:
  offset:
    name: offset
    in: query
    description: Number of records to skip for pagination
    required: false
    type: integer
    format: int64
    default: 0
    minimum: 0

  limit:
    name: limit
    in: query
    description: Maximum number of records to return
    required: false
    type: integer
    format: int64
    default: 100
    minimum: 0

  isManagedByMe:
    name: isManagedByMe
    in: query
    type: boolean
    default: false

responses:
  BadRequest:
    description: Bad request
    schema:
      $ref: "#/definitions/Error"
  Forbidden:
    description: Forbidden
    schema:
      $ref: "#/definitions/Error"
  NotFound:
    description: Not Found
    schema:
      $ref: "#/definitions/Error"
  InternalError:
    description: Internal error
    schema:
      $ref: "#/definitions/Error"

definitions:
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        description: Either same as HTTP Status Code OR >= 600.
        type: integer
        format: int32
      message:
        type: string

  User:
    type: object
    description: "user profile"
    properties:
      id:
        type: string
      active:
        type: boolean
      role:
        type: string
        enum:
          - "user"
          - "admin"
          - "engineer"
      organizationIds:
        type: array
        items:
          type: string
          format: uuid
        x-omitempty: true

  Session:
    type: object
    description: "session"
    properties:
      washServer:
        $ref: "#/definitions/WashServer"
      postID:
        type: integer
      postBalance:
        type: integer
  
  BonusCharge:
    type: object
    description: "bonus amount for use in session"
    properties:
      amount:
        type: integer

  WashServer:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      serviceKey:
        type: string
      createdBy:
        type: string
      groupId:
        type: string
        format: uuid
      organizationId:
        type: string
        format: uuid

  WashServerCreation:
    required: ["name", "description"]
    properties:
      name:
        type: string
      description:
        type: string
      groupId:
        type: string
        format: uuid
        x-nullable: true
    
  WashServerUpdate:
    type: object
    properties:
      name:
        type: string
      description:
        type: string

  UserRoleUpdate:
    type: object
    properties:
      role:
        type: string
        enum:
          - "user"
          - "admin"
          - "engineer"

  Organization:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      description:
        type: string
      isDefault:
        type: boolean

  OrganizationCreation:
    properties:
      name:
        type: string
      description:
        type: string
    required:
      - name
      - description

  OrganizationUpdate:
    type: object
    properties:
      name:
        type: string
      description:
        type: string

  ServerGroup:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      description:
        type: string
      organizationId:
        type: string
        format: uuid
      isDefault:
        type: boolean

  ServerGroupCreation:
    required: ["name", "description", "organizationId"]
    properties:
      name:
        type: string
      description:
        type: string
      organizationId:
        type: string
        format: uuid

  ServerGroupUpdate:
    type: object
    properties:
      name:
        type: string
      description:
        type: string

  Wallet:
    type: object
    properties:
      id:
        type: string
        format: uuid
      userId:
        type: string
      organizationId:
        type: string
        format: uuid
      balance:
        type: integer
        x-omitempty: false
      pendingBalance:
        type: integer
        x-omitempty: false