// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"washBonus/openapi/models"
)

// AssignUserToOrganizationReader is a Reader for the AssignUserToOrganization structure.
type AssignUserToOrganizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignUserToOrganizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAssignUserToOrganizationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssignUserToOrganizationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAssignUserToOrganizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAssignUserToOrganizationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignUserToOrganizationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /organizations/{organizationId}/users/{userId}] assignUserToOrganization", response, response.Code())
	}
}

// NewAssignUserToOrganizationNoContent creates a AssignUserToOrganizationNoContent with default headers values
func NewAssignUserToOrganizationNoContent() *AssignUserToOrganizationNoContent {
	return &AssignUserToOrganizationNoContent{}
}

/*
AssignUserToOrganizationNoContent describes a response with status code 204, with default header values.

OK
*/
type AssignUserToOrganizationNoContent struct {
}

// IsSuccess returns true when this assign user to organization no content response has a 2xx status code
func (o *AssignUserToOrganizationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this assign user to organization no content response has a 3xx status code
func (o *AssignUserToOrganizationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign user to organization no content response has a 4xx status code
func (o *AssignUserToOrganizationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign user to organization no content response has a 5xx status code
func (o *AssignUserToOrganizationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this assign user to organization no content response a status code equal to that given
func (o *AssignUserToOrganizationNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the assign user to organization no content response
func (o *AssignUserToOrganizationNoContent) Code() int {
	return 204
}

func (o *AssignUserToOrganizationNoContent) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/users/{userId}][%d] assignUserToOrganizationNoContent ", 204)
}

func (o *AssignUserToOrganizationNoContent) String() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/users/{userId}][%d] assignUserToOrganizationNoContent ", 204)
}

func (o *AssignUserToOrganizationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssignUserToOrganizationBadRequest creates a AssignUserToOrganizationBadRequest with default headers values
func NewAssignUserToOrganizationBadRequest() *AssignUserToOrganizationBadRequest {
	return &AssignUserToOrganizationBadRequest{}
}

/*
AssignUserToOrganizationBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AssignUserToOrganizationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign user to organization bad request response has a 2xx status code
func (o *AssignUserToOrganizationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign user to organization bad request response has a 3xx status code
func (o *AssignUserToOrganizationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign user to organization bad request response has a 4xx status code
func (o *AssignUserToOrganizationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign user to organization bad request response has a 5xx status code
func (o *AssignUserToOrganizationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this assign user to organization bad request response a status code equal to that given
func (o *AssignUserToOrganizationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the assign user to organization bad request response
func (o *AssignUserToOrganizationBadRequest) Code() int {
	return 400
}

func (o *AssignUserToOrganizationBadRequest) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/users/{userId}][%d] assignUserToOrganizationBadRequest  %+v", 400, o.Payload)
}

func (o *AssignUserToOrganizationBadRequest) String() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/users/{userId}][%d] assignUserToOrganizationBadRequest  %+v", 400, o.Payload)
}

func (o *AssignUserToOrganizationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignUserToOrganizationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignUserToOrganizationForbidden creates a AssignUserToOrganizationForbidden with default headers values
func NewAssignUserToOrganizationForbidden() *AssignUserToOrganizationForbidden {
	return &AssignUserToOrganizationForbidden{}
}

/*
AssignUserToOrganizationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AssignUserToOrganizationForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign user to organization forbidden response has a 2xx status code
func (o *AssignUserToOrganizationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign user to organization forbidden response has a 3xx status code
func (o *AssignUserToOrganizationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign user to organization forbidden response has a 4xx status code
func (o *AssignUserToOrganizationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign user to organization forbidden response has a 5xx status code
func (o *AssignUserToOrganizationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this assign user to organization forbidden response a status code equal to that given
func (o *AssignUserToOrganizationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the assign user to organization forbidden response
func (o *AssignUserToOrganizationForbidden) Code() int {
	return 403
}

func (o *AssignUserToOrganizationForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/users/{userId}][%d] assignUserToOrganizationForbidden  %+v", 403, o.Payload)
}

func (o *AssignUserToOrganizationForbidden) String() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/users/{userId}][%d] assignUserToOrganizationForbidden  %+v", 403, o.Payload)
}

func (o *AssignUserToOrganizationForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignUserToOrganizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignUserToOrganizationNotFound creates a AssignUserToOrganizationNotFound with default headers values
func NewAssignUserToOrganizationNotFound() *AssignUserToOrganizationNotFound {
	return &AssignUserToOrganizationNotFound{}
}

/*
AssignUserToOrganizationNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AssignUserToOrganizationNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign user to organization not found response has a 2xx status code
func (o *AssignUserToOrganizationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign user to organization not found response has a 3xx status code
func (o *AssignUserToOrganizationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign user to organization not found response has a 4xx status code
func (o *AssignUserToOrganizationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign user to organization not found response has a 5xx status code
func (o *AssignUserToOrganizationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this assign user to organization not found response a status code equal to that given
func (o *AssignUserToOrganizationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the assign user to organization not found response
func (o *AssignUserToOrganizationNotFound) Code() int {
	return 404
}

func (o *AssignUserToOrganizationNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/users/{userId}][%d] assignUserToOrganizationNotFound  %+v", 404, o.Payload)
}

func (o *AssignUserToOrganizationNotFound) String() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/users/{userId}][%d] assignUserToOrganizationNotFound  %+v", 404, o.Payload)
}

func (o *AssignUserToOrganizationNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignUserToOrganizationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignUserToOrganizationInternalServerError creates a AssignUserToOrganizationInternalServerError with default headers values
func NewAssignUserToOrganizationInternalServerError() *AssignUserToOrganizationInternalServerError {
	return &AssignUserToOrganizationInternalServerError{}
}

/*
AssignUserToOrganizationInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type AssignUserToOrganizationInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign user to organization internal server error response has a 2xx status code
func (o *AssignUserToOrganizationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign user to organization internal server error response has a 3xx status code
func (o *AssignUserToOrganizationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign user to organization internal server error response has a 4xx status code
func (o *AssignUserToOrganizationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign user to organization internal server error response has a 5xx status code
func (o *AssignUserToOrganizationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this assign user to organization internal server error response a status code equal to that given
func (o *AssignUserToOrganizationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the assign user to organization internal server error response
func (o *AssignUserToOrganizationInternalServerError) Code() int {
	return 500
}

func (o *AssignUserToOrganizationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/users/{userId}][%d] assignUserToOrganizationInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignUserToOrganizationInternalServerError) String() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/users/{userId}][%d] assignUserToOrganizationInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignUserToOrganizationInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignUserToOrganizationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
