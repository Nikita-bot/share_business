// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"washBonus/openapi/models"
)

// AssignServerToGroupReader is a Reader for the AssignServerToGroup structure.
type AssignServerToGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignServerToGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAssignServerToGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssignServerToGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAssignServerToGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAssignServerToGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignServerToGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /server-groups/{groupId}/wash-servers/{serverId}] assignServerToGroup", response, response.Code())
	}
}

// NewAssignServerToGroupNoContent creates a AssignServerToGroupNoContent with default headers values
func NewAssignServerToGroupNoContent() *AssignServerToGroupNoContent {
	return &AssignServerToGroupNoContent{}
}

/*
AssignServerToGroupNoContent describes a response with status code 204, with default header values.

OK
*/
type AssignServerToGroupNoContent struct {
}

// IsSuccess returns true when this assign server to group no content response has a 2xx status code
func (o *AssignServerToGroupNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this assign server to group no content response has a 3xx status code
func (o *AssignServerToGroupNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign server to group no content response has a 4xx status code
func (o *AssignServerToGroupNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign server to group no content response has a 5xx status code
func (o *AssignServerToGroupNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this assign server to group no content response a status code equal to that given
func (o *AssignServerToGroupNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the assign server to group no content response
func (o *AssignServerToGroupNoContent) Code() int {
	return 204
}

func (o *AssignServerToGroupNoContent) Error() string {
	return fmt.Sprintf("[POST /server-groups/{groupId}/wash-servers/{serverId}][%d] assignServerToGroupNoContent ", 204)
}

func (o *AssignServerToGroupNoContent) String() string {
	return fmt.Sprintf("[POST /server-groups/{groupId}/wash-servers/{serverId}][%d] assignServerToGroupNoContent ", 204)
}

func (o *AssignServerToGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssignServerToGroupBadRequest creates a AssignServerToGroupBadRequest with default headers values
func NewAssignServerToGroupBadRequest() *AssignServerToGroupBadRequest {
	return &AssignServerToGroupBadRequest{}
}

/*
AssignServerToGroupBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AssignServerToGroupBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign server to group bad request response has a 2xx status code
func (o *AssignServerToGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign server to group bad request response has a 3xx status code
func (o *AssignServerToGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign server to group bad request response has a 4xx status code
func (o *AssignServerToGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign server to group bad request response has a 5xx status code
func (o *AssignServerToGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this assign server to group bad request response a status code equal to that given
func (o *AssignServerToGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the assign server to group bad request response
func (o *AssignServerToGroupBadRequest) Code() int {
	return 400
}

func (o *AssignServerToGroupBadRequest) Error() string {
	return fmt.Sprintf("[POST /server-groups/{groupId}/wash-servers/{serverId}][%d] assignServerToGroupBadRequest  %+v", 400, o.Payload)
}

func (o *AssignServerToGroupBadRequest) String() string {
	return fmt.Sprintf("[POST /server-groups/{groupId}/wash-servers/{serverId}][%d] assignServerToGroupBadRequest  %+v", 400, o.Payload)
}

func (o *AssignServerToGroupBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignServerToGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignServerToGroupForbidden creates a AssignServerToGroupForbidden with default headers values
func NewAssignServerToGroupForbidden() *AssignServerToGroupForbidden {
	return &AssignServerToGroupForbidden{}
}

/*
AssignServerToGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AssignServerToGroupForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign server to group forbidden response has a 2xx status code
func (o *AssignServerToGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign server to group forbidden response has a 3xx status code
func (o *AssignServerToGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign server to group forbidden response has a 4xx status code
func (o *AssignServerToGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign server to group forbidden response has a 5xx status code
func (o *AssignServerToGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this assign server to group forbidden response a status code equal to that given
func (o *AssignServerToGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the assign server to group forbidden response
func (o *AssignServerToGroupForbidden) Code() int {
	return 403
}

func (o *AssignServerToGroupForbidden) Error() string {
	return fmt.Sprintf("[POST /server-groups/{groupId}/wash-servers/{serverId}][%d] assignServerToGroupForbidden  %+v", 403, o.Payload)
}

func (o *AssignServerToGroupForbidden) String() string {
	return fmt.Sprintf("[POST /server-groups/{groupId}/wash-servers/{serverId}][%d] assignServerToGroupForbidden  %+v", 403, o.Payload)
}

func (o *AssignServerToGroupForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignServerToGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignServerToGroupNotFound creates a AssignServerToGroupNotFound with default headers values
func NewAssignServerToGroupNotFound() *AssignServerToGroupNotFound {
	return &AssignServerToGroupNotFound{}
}

/*
AssignServerToGroupNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AssignServerToGroupNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign server to group not found response has a 2xx status code
func (o *AssignServerToGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign server to group not found response has a 3xx status code
func (o *AssignServerToGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign server to group not found response has a 4xx status code
func (o *AssignServerToGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign server to group not found response has a 5xx status code
func (o *AssignServerToGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this assign server to group not found response a status code equal to that given
func (o *AssignServerToGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the assign server to group not found response
func (o *AssignServerToGroupNotFound) Code() int {
	return 404
}

func (o *AssignServerToGroupNotFound) Error() string {
	return fmt.Sprintf("[POST /server-groups/{groupId}/wash-servers/{serverId}][%d] assignServerToGroupNotFound  %+v", 404, o.Payload)
}

func (o *AssignServerToGroupNotFound) String() string {
	return fmt.Sprintf("[POST /server-groups/{groupId}/wash-servers/{serverId}][%d] assignServerToGroupNotFound  %+v", 404, o.Payload)
}

func (o *AssignServerToGroupNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignServerToGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignServerToGroupInternalServerError creates a AssignServerToGroupInternalServerError with default headers values
func NewAssignServerToGroupInternalServerError() *AssignServerToGroupInternalServerError {
	return &AssignServerToGroupInternalServerError{}
}

/*
AssignServerToGroupInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type AssignServerToGroupInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign server to group internal server error response has a 2xx status code
func (o *AssignServerToGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign server to group internal server error response has a 3xx status code
func (o *AssignServerToGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign server to group internal server error response has a 4xx status code
func (o *AssignServerToGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign server to group internal server error response has a 5xx status code
func (o *AssignServerToGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this assign server to group internal server error response a status code equal to that given
func (o *AssignServerToGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the assign server to group internal server error response
func (o *AssignServerToGroupInternalServerError) Code() int {
	return 500
}

func (o *AssignServerToGroupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /server-groups/{groupId}/wash-servers/{serverId}][%d] assignServerToGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignServerToGroupInternalServerError) String() string {
	return fmt.Sprintf("[POST /server-groups/{groupId}/wash-servers/{serverId}][%d] assignServerToGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignServerToGroupInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignServerToGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
