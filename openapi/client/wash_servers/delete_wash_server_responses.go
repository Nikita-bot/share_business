// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"washBonus/openapi/models"
)

// DeleteWashServerReader is a Reader for the DeleteWashServer structure.
type DeleteWashServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteWashServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteWashServerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteWashServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteWashServerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteWashServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteWashServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /wash-servers/{serverId}] deleteWashServer", response, response.Code())
	}
}

// NewDeleteWashServerNoContent creates a DeleteWashServerNoContent with default headers values
func NewDeleteWashServerNoContent() *DeleteWashServerNoContent {
	return &DeleteWashServerNoContent{}
}

/*
DeleteWashServerNoContent describes a response with status code 204, with default header values.

OK
*/
type DeleteWashServerNoContent struct {
}

// IsSuccess returns true when this delete wash server no content response has a 2xx status code
func (o *DeleteWashServerNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete wash server no content response has a 3xx status code
func (o *DeleteWashServerNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete wash server no content response has a 4xx status code
func (o *DeleteWashServerNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete wash server no content response has a 5xx status code
func (o *DeleteWashServerNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete wash server no content response a status code equal to that given
func (o *DeleteWashServerNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete wash server no content response
func (o *DeleteWashServerNoContent) Code() int {
	return 204
}

func (o *DeleteWashServerNoContent) Error() string {
	return fmt.Sprintf("[DELETE /wash-servers/{serverId}][%d] deleteWashServerNoContent ", 204)
}

func (o *DeleteWashServerNoContent) String() string {
	return fmt.Sprintf("[DELETE /wash-servers/{serverId}][%d] deleteWashServerNoContent ", 204)
}

func (o *DeleteWashServerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWashServerBadRequest creates a DeleteWashServerBadRequest with default headers values
func NewDeleteWashServerBadRequest() *DeleteWashServerBadRequest {
	return &DeleteWashServerBadRequest{}
}

/*
DeleteWashServerBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteWashServerBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete wash server bad request response has a 2xx status code
func (o *DeleteWashServerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete wash server bad request response has a 3xx status code
func (o *DeleteWashServerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete wash server bad request response has a 4xx status code
func (o *DeleteWashServerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete wash server bad request response has a 5xx status code
func (o *DeleteWashServerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete wash server bad request response a status code equal to that given
func (o *DeleteWashServerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete wash server bad request response
func (o *DeleteWashServerBadRequest) Code() int {
	return 400
}

func (o *DeleteWashServerBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /wash-servers/{serverId}][%d] deleteWashServerBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteWashServerBadRequest) String() string {
	return fmt.Sprintf("[DELETE /wash-servers/{serverId}][%d] deleteWashServerBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteWashServerBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteWashServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWashServerForbidden creates a DeleteWashServerForbidden with default headers values
func NewDeleteWashServerForbidden() *DeleteWashServerForbidden {
	return &DeleteWashServerForbidden{}
}

/*
DeleteWashServerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteWashServerForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete wash server forbidden response has a 2xx status code
func (o *DeleteWashServerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete wash server forbidden response has a 3xx status code
func (o *DeleteWashServerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete wash server forbidden response has a 4xx status code
func (o *DeleteWashServerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete wash server forbidden response has a 5xx status code
func (o *DeleteWashServerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete wash server forbidden response a status code equal to that given
func (o *DeleteWashServerForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete wash server forbidden response
func (o *DeleteWashServerForbidden) Code() int {
	return 403
}

func (o *DeleteWashServerForbidden) Error() string {
	return fmt.Sprintf("[DELETE /wash-servers/{serverId}][%d] deleteWashServerForbidden  %+v", 403, o.Payload)
}

func (o *DeleteWashServerForbidden) String() string {
	return fmt.Sprintf("[DELETE /wash-servers/{serverId}][%d] deleteWashServerForbidden  %+v", 403, o.Payload)
}

func (o *DeleteWashServerForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteWashServerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWashServerNotFound creates a DeleteWashServerNotFound with default headers values
func NewDeleteWashServerNotFound() *DeleteWashServerNotFound {
	return &DeleteWashServerNotFound{}
}

/*
DeleteWashServerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteWashServerNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete wash server not found response has a 2xx status code
func (o *DeleteWashServerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete wash server not found response has a 3xx status code
func (o *DeleteWashServerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete wash server not found response has a 4xx status code
func (o *DeleteWashServerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete wash server not found response has a 5xx status code
func (o *DeleteWashServerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete wash server not found response a status code equal to that given
func (o *DeleteWashServerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete wash server not found response
func (o *DeleteWashServerNotFound) Code() int {
	return 404
}

func (o *DeleteWashServerNotFound) Error() string {
	return fmt.Sprintf("[DELETE /wash-servers/{serverId}][%d] deleteWashServerNotFound  %+v", 404, o.Payload)
}

func (o *DeleteWashServerNotFound) String() string {
	return fmt.Sprintf("[DELETE /wash-servers/{serverId}][%d] deleteWashServerNotFound  %+v", 404, o.Payload)
}

func (o *DeleteWashServerNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteWashServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWashServerInternalServerError creates a DeleteWashServerInternalServerError with default headers values
func NewDeleteWashServerInternalServerError() *DeleteWashServerInternalServerError {
	return &DeleteWashServerInternalServerError{}
}

/*
DeleteWashServerInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type DeleteWashServerInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete wash server internal server error response has a 2xx status code
func (o *DeleteWashServerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete wash server internal server error response has a 3xx status code
func (o *DeleteWashServerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete wash server internal server error response has a 4xx status code
func (o *DeleteWashServerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete wash server internal server error response has a 5xx status code
func (o *DeleteWashServerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete wash server internal server error response a status code equal to that given
func (o *DeleteWashServerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete wash server internal server error response
func (o *DeleteWashServerInternalServerError) Code() int {
	return 500
}

func (o *DeleteWashServerInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /wash-servers/{serverId}][%d] deleteWashServerInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteWashServerInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /wash-servers/{serverId}][%d] deleteWashServerInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteWashServerInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteWashServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
