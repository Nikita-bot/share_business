// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"washBonus/openapi/models"
)

// UpdateUserRoleReader is a Reader for the UpdateUserRole structure.
type UpdateUserRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateUserRoleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUserRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /users/{userId}] updateUserRole", response, response.Code())
	}
}

// NewUpdateUserRoleNoContent creates a UpdateUserRoleNoContent with default headers values
func NewUpdateUserRoleNoContent() *UpdateUserRoleNoContent {
	return &UpdateUserRoleNoContent{}
}

/*
UpdateUserRoleNoContent describes a response with status code 204, with default header values.

OK
*/
type UpdateUserRoleNoContent struct {
}

// IsSuccess returns true when this update user role no content response has a 2xx status code
func (o *UpdateUserRoleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user role no content response has a 3xx status code
func (o *UpdateUserRoleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user role no content response has a 4xx status code
func (o *UpdateUserRoleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user role no content response has a 5xx status code
func (o *UpdateUserRoleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update user role no content response a status code equal to that given
func (o *UpdateUserRoleNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update user role no content response
func (o *UpdateUserRoleNoContent) Code() int {
	return 204
}

func (o *UpdateUserRoleNoContent) Error() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] updateUserRoleNoContent ", 204)
}

func (o *UpdateUserRoleNoContent) String() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] updateUserRoleNoContent ", 204)
}

func (o *UpdateUserRoleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserRoleBadRequest creates a UpdateUserRoleBadRequest with default headers values
func NewUpdateUserRoleBadRequest() *UpdateUserRoleBadRequest {
	return &UpdateUserRoleBadRequest{}
}

/*
UpdateUserRoleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateUserRoleBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user role bad request response has a 2xx status code
func (o *UpdateUserRoleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user role bad request response has a 3xx status code
func (o *UpdateUserRoleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user role bad request response has a 4xx status code
func (o *UpdateUserRoleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user role bad request response has a 5xx status code
func (o *UpdateUserRoleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update user role bad request response a status code equal to that given
func (o *UpdateUserRoleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update user role bad request response
func (o *UpdateUserRoleBadRequest) Code() int {
	return 400
}

func (o *UpdateUserRoleBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] updateUserRoleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserRoleBadRequest) String() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] updateUserRoleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserRoleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserRoleForbidden creates a UpdateUserRoleForbidden with default headers values
func NewUpdateUserRoleForbidden() *UpdateUserRoleForbidden {
	return &UpdateUserRoleForbidden{}
}

/*
UpdateUserRoleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateUserRoleForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user role forbidden response has a 2xx status code
func (o *UpdateUserRoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user role forbidden response has a 3xx status code
func (o *UpdateUserRoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user role forbidden response has a 4xx status code
func (o *UpdateUserRoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user role forbidden response has a 5xx status code
func (o *UpdateUserRoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update user role forbidden response a status code equal to that given
func (o *UpdateUserRoleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update user role forbidden response
func (o *UpdateUserRoleForbidden) Code() int {
	return 403
}

func (o *UpdateUserRoleForbidden) Error() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] updateUserRoleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateUserRoleForbidden) String() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] updateUserRoleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateUserRoleForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserRoleNotFound creates a UpdateUserRoleNotFound with default headers values
func NewUpdateUserRoleNotFound() *UpdateUserRoleNotFound {
	return &UpdateUserRoleNotFound{}
}

/*
UpdateUserRoleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateUserRoleNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user role not found response has a 2xx status code
func (o *UpdateUserRoleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user role not found response has a 3xx status code
func (o *UpdateUserRoleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user role not found response has a 4xx status code
func (o *UpdateUserRoleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user role not found response has a 5xx status code
func (o *UpdateUserRoleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user role not found response a status code equal to that given
func (o *UpdateUserRoleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update user role not found response
func (o *UpdateUserRoleNotFound) Code() int {
	return 404
}

func (o *UpdateUserRoleNotFound) Error() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] updateUserRoleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserRoleNotFound) String() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] updateUserRoleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserRoleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserRoleInternalServerError creates a UpdateUserRoleInternalServerError with default headers values
func NewUpdateUserRoleInternalServerError() *UpdateUserRoleInternalServerError {
	return &UpdateUserRoleInternalServerError{}
}

/*
UpdateUserRoleInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type UpdateUserRoleInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user role internal server error response has a 2xx status code
func (o *UpdateUserRoleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user role internal server error response has a 3xx status code
func (o *UpdateUserRoleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user role internal server error response has a 4xx status code
func (o *UpdateUserRoleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user role internal server error response has a 5xx status code
func (o *UpdateUserRoleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update user role internal server error response a status code equal to that given
func (o *UpdateUserRoleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update user role internal server error response
func (o *UpdateUserRoleInternalServerError) Code() int {
	return 500
}

func (o *UpdateUserRoleInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] updateUserRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUserRoleInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] updateUserRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUserRoleInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
