// Code generated by go-swagger; DO NOT EDIT.

package server_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"washBonus/openapi/models"
)

// GetServerGroupByIDReader is a Reader for the GetServerGroupByID structure.
type GetServerGroupByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServerGroupByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServerGroupByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServerGroupByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServerGroupByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServerGroupByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetServerGroupByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /server-groups/{groupId}] getServerGroupById", response, response.Code())
	}
}

// NewGetServerGroupByIDOK creates a GetServerGroupByIDOK with default headers values
func NewGetServerGroupByIDOK() *GetServerGroupByIDOK {
	return &GetServerGroupByIDOK{}
}

/*
GetServerGroupByIDOK describes a response with status code 200, with default header values.

OK
*/
type GetServerGroupByIDOK struct {
	Payload *models.ServerGroup
}

// IsSuccess returns true when this get server group by Id o k response has a 2xx status code
func (o *GetServerGroupByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get server group by Id o k response has a 3xx status code
func (o *GetServerGroupByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server group by Id o k response has a 4xx status code
func (o *GetServerGroupByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get server group by Id o k response has a 5xx status code
func (o *GetServerGroupByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get server group by Id o k response a status code equal to that given
func (o *GetServerGroupByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get server group by Id o k response
func (o *GetServerGroupByIDOK) Code() int {
	return 200
}

func (o *GetServerGroupByIDOK) Error() string {
	return fmt.Sprintf("[GET /server-groups/{groupId}][%d] getServerGroupByIdOK  %+v", 200, o.Payload)
}

func (o *GetServerGroupByIDOK) String() string {
	return fmt.Sprintf("[GET /server-groups/{groupId}][%d] getServerGroupByIdOK  %+v", 200, o.Payload)
}

func (o *GetServerGroupByIDOK) GetPayload() *models.ServerGroup {
	return o.Payload
}

func (o *GetServerGroupByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerGroupByIDBadRequest creates a GetServerGroupByIDBadRequest with default headers values
func NewGetServerGroupByIDBadRequest() *GetServerGroupByIDBadRequest {
	return &GetServerGroupByIDBadRequest{}
}

/*
GetServerGroupByIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetServerGroupByIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server group by Id bad request response has a 2xx status code
func (o *GetServerGroupByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server group by Id bad request response has a 3xx status code
func (o *GetServerGroupByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server group by Id bad request response has a 4xx status code
func (o *GetServerGroupByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server group by Id bad request response has a 5xx status code
func (o *GetServerGroupByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get server group by Id bad request response a status code equal to that given
func (o *GetServerGroupByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get server group by Id bad request response
func (o *GetServerGroupByIDBadRequest) Code() int {
	return 400
}

func (o *GetServerGroupByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /server-groups/{groupId}][%d] getServerGroupByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetServerGroupByIDBadRequest) String() string {
	return fmt.Sprintf("[GET /server-groups/{groupId}][%d] getServerGroupByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetServerGroupByIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerGroupByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerGroupByIDForbidden creates a GetServerGroupByIDForbidden with default headers values
func NewGetServerGroupByIDForbidden() *GetServerGroupByIDForbidden {
	return &GetServerGroupByIDForbidden{}
}

/*
GetServerGroupByIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetServerGroupByIDForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server group by Id forbidden response has a 2xx status code
func (o *GetServerGroupByIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server group by Id forbidden response has a 3xx status code
func (o *GetServerGroupByIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server group by Id forbidden response has a 4xx status code
func (o *GetServerGroupByIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server group by Id forbidden response has a 5xx status code
func (o *GetServerGroupByIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get server group by Id forbidden response a status code equal to that given
func (o *GetServerGroupByIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get server group by Id forbidden response
func (o *GetServerGroupByIDForbidden) Code() int {
	return 403
}

func (o *GetServerGroupByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /server-groups/{groupId}][%d] getServerGroupByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetServerGroupByIDForbidden) String() string {
	return fmt.Sprintf("[GET /server-groups/{groupId}][%d] getServerGroupByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetServerGroupByIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerGroupByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerGroupByIDNotFound creates a GetServerGroupByIDNotFound with default headers values
func NewGetServerGroupByIDNotFound() *GetServerGroupByIDNotFound {
	return &GetServerGroupByIDNotFound{}
}

/*
GetServerGroupByIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetServerGroupByIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server group by Id not found response has a 2xx status code
func (o *GetServerGroupByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server group by Id not found response has a 3xx status code
func (o *GetServerGroupByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server group by Id not found response has a 4xx status code
func (o *GetServerGroupByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server group by Id not found response has a 5xx status code
func (o *GetServerGroupByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get server group by Id not found response a status code equal to that given
func (o *GetServerGroupByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get server group by Id not found response
func (o *GetServerGroupByIDNotFound) Code() int {
	return 404
}

func (o *GetServerGroupByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /server-groups/{groupId}][%d] getServerGroupByIdNotFound  %+v", 404, o.Payload)
}

func (o *GetServerGroupByIDNotFound) String() string {
	return fmt.Sprintf("[GET /server-groups/{groupId}][%d] getServerGroupByIdNotFound  %+v", 404, o.Payload)
}

func (o *GetServerGroupByIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerGroupByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerGroupByIDInternalServerError creates a GetServerGroupByIDInternalServerError with default headers values
func NewGetServerGroupByIDInternalServerError() *GetServerGroupByIDInternalServerError {
	return &GetServerGroupByIDInternalServerError{}
}

/*
GetServerGroupByIDInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type GetServerGroupByIDInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server group by Id internal server error response has a 2xx status code
func (o *GetServerGroupByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server group by Id internal server error response has a 3xx status code
func (o *GetServerGroupByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server group by Id internal server error response has a 4xx status code
func (o *GetServerGroupByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get server group by Id internal server error response has a 5xx status code
func (o *GetServerGroupByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get server group by Id internal server error response a status code equal to that given
func (o *GetServerGroupByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get server group by Id internal server error response
func (o *GetServerGroupByIDInternalServerError) Code() int {
	return 500
}

func (o *GetServerGroupByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /server-groups/{groupId}][%d] getServerGroupByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetServerGroupByIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /server-groups/{groupId}][%d] getServerGroupByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetServerGroupByIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerGroupByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
