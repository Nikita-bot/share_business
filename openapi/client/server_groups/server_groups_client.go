// Code generated by go-swagger; DO NOT EDIT.

package server_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateServerGroup(params *CreateServerGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServerGroupOK, error)

	DeleteServerGroup(params *DeleteServerGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServerGroupNoContent, error)

	GetServerGroupByID(params *GetServerGroupByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerGroupByIDOK, error)

	GetServerGroups(params *GetServerGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerGroupsOK, error)

	UpdateServerGroup(params *UpdateServerGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServerGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateServerGroup create server group API
*/
func (a *Client) CreateServerGroup(params *CreateServerGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServerGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServerGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createServerGroup",
		Method:             "POST",
		PathPattern:        "/server-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateServerGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServerGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createServerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteServerGroup delete server group API
*/
func (a *Client) DeleteServerGroup(params *DeleteServerGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServerGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServerGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteServerGroup",
		Method:             "DELETE",
		PathPattern:        "/server-groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServerGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServerGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServerGroupByID get server group by Id API
*/
func (a *Client) GetServerGroupByID(params *GetServerGroupByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerGroupByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerGroupById",
		Method:             "GET",
		PathPattern:        "/server-groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerGroupByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerGroupByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerGroupById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServerGroups get server groups API
*/
func (a *Client) GetServerGroups(params *GetServerGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerGroups",
		Method:             "GET",
		PathPattern:        "/server-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateServerGroup update server group API
*/
func (a *Client) UpdateServerGroup(params *UpdateServerGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServerGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServerGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateServerGroup",
		Method:             "PATCH",
		PathPattern:        "/server-groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServerGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServerGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateServerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
