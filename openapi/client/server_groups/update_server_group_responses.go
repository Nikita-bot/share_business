// Code generated by go-swagger; DO NOT EDIT.

package server_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"washBonus/openapi/models"
)

// UpdateServerGroupReader is a Reader for the UpdateServerGroup structure.
type UpdateServerGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServerGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateServerGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServerGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateServerGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateServerGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateServerGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /server-groups/{groupId}] updateServerGroup", response, response.Code())
	}
}

// NewUpdateServerGroupOK creates a UpdateServerGroupOK with default headers values
func NewUpdateServerGroupOK() *UpdateServerGroupOK {
	return &UpdateServerGroupOK{}
}

/*
UpdateServerGroupOK describes a response with status code 200, with default header values.

Successfull updated
*/
type UpdateServerGroupOK struct {
	Payload *models.ServerGroup
}

// IsSuccess returns true when this update server group o k response has a 2xx status code
func (o *UpdateServerGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update server group o k response has a 3xx status code
func (o *UpdateServerGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server group o k response has a 4xx status code
func (o *UpdateServerGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update server group o k response has a 5xx status code
func (o *UpdateServerGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update server group o k response a status code equal to that given
func (o *UpdateServerGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update server group o k response
func (o *UpdateServerGroupOK) Code() int {
	return 200
}

func (o *UpdateServerGroupOK) Error() string {
	return fmt.Sprintf("[PATCH /server-groups/{groupId}][%d] updateServerGroupOK  %+v", 200, o.Payload)
}

func (o *UpdateServerGroupOK) String() string {
	return fmt.Sprintf("[PATCH /server-groups/{groupId}][%d] updateServerGroupOK  %+v", 200, o.Payload)
}

func (o *UpdateServerGroupOK) GetPayload() *models.ServerGroup {
	return o.Payload
}

func (o *UpdateServerGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerGroupBadRequest creates a UpdateServerGroupBadRequest with default headers values
func NewUpdateServerGroupBadRequest() *UpdateServerGroupBadRequest {
	return &UpdateServerGroupBadRequest{}
}

/*
UpdateServerGroupBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateServerGroupBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update server group bad request response has a 2xx status code
func (o *UpdateServerGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server group bad request response has a 3xx status code
func (o *UpdateServerGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server group bad request response has a 4xx status code
func (o *UpdateServerGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update server group bad request response has a 5xx status code
func (o *UpdateServerGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update server group bad request response a status code equal to that given
func (o *UpdateServerGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update server group bad request response
func (o *UpdateServerGroupBadRequest) Code() int {
	return 400
}

func (o *UpdateServerGroupBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /server-groups/{groupId}][%d] updateServerGroupBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServerGroupBadRequest) String() string {
	return fmt.Sprintf("[PATCH /server-groups/{groupId}][%d] updateServerGroupBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServerGroupBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServerGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerGroupForbidden creates a UpdateServerGroupForbidden with default headers values
func NewUpdateServerGroupForbidden() *UpdateServerGroupForbidden {
	return &UpdateServerGroupForbidden{}
}

/*
UpdateServerGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateServerGroupForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update server group forbidden response has a 2xx status code
func (o *UpdateServerGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server group forbidden response has a 3xx status code
func (o *UpdateServerGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server group forbidden response has a 4xx status code
func (o *UpdateServerGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update server group forbidden response has a 5xx status code
func (o *UpdateServerGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update server group forbidden response a status code equal to that given
func (o *UpdateServerGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update server group forbidden response
func (o *UpdateServerGroupForbidden) Code() int {
	return 403
}

func (o *UpdateServerGroupForbidden) Error() string {
	return fmt.Sprintf("[PATCH /server-groups/{groupId}][%d] updateServerGroupForbidden  %+v", 403, o.Payload)
}

func (o *UpdateServerGroupForbidden) String() string {
	return fmt.Sprintf("[PATCH /server-groups/{groupId}][%d] updateServerGroupForbidden  %+v", 403, o.Payload)
}

func (o *UpdateServerGroupForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServerGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerGroupNotFound creates a UpdateServerGroupNotFound with default headers values
func NewUpdateServerGroupNotFound() *UpdateServerGroupNotFound {
	return &UpdateServerGroupNotFound{}
}

/*
UpdateServerGroupNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateServerGroupNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update server group not found response has a 2xx status code
func (o *UpdateServerGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server group not found response has a 3xx status code
func (o *UpdateServerGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server group not found response has a 4xx status code
func (o *UpdateServerGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update server group not found response has a 5xx status code
func (o *UpdateServerGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update server group not found response a status code equal to that given
func (o *UpdateServerGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update server group not found response
func (o *UpdateServerGroupNotFound) Code() int {
	return 404
}

func (o *UpdateServerGroupNotFound) Error() string {
	return fmt.Sprintf("[PATCH /server-groups/{groupId}][%d] updateServerGroupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServerGroupNotFound) String() string {
	return fmt.Sprintf("[PATCH /server-groups/{groupId}][%d] updateServerGroupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServerGroupNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServerGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerGroupInternalServerError creates a UpdateServerGroupInternalServerError with default headers values
func NewUpdateServerGroupInternalServerError() *UpdateServerGroupInternalServerError {
	return &UpdateServerGroupInternalServerError{}
}

/*
UpdateServerGroupInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type UpdateServerGroupInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update server group internal server error response has a 2xx status code
func (o *UpdateServerGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server group internal server error response has a 3xx status code
func (o *UpdateServerGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server group internal server error response has a 4xx status code
func (o *UpdateServerGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update server group internal server error response has a 5xx status code
func (o *UpdateServerGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update server group internal server error response a status code equal to that given
func (o *UpdateServerGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update server group internal server error response
func (o *UpdateServerGroupInternalServerError) Code() int {
	return 500
}

func (o *UpdateServerGroupInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /server-groups/{groupId}][%d] updateServerGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateServerGroupInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /server-groups/{groupId}][%d] updateServerGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateServerGroupInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServerGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
