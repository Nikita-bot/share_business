// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationSettings organization settings
//
// swagger:model OrganizationSettings
type OrganizationSettings struct {

	// bonus percentage
	// Maximum: 100
	// Minimum: 0
	BonusPercentage *int64 `json:"bonusPercentage,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// organization Id
	// Format: uuid
	OrganizationID strfmt.UUID `json:"organizationId,omitempty"`

	// reports processing delay minutes
	// Minimum: 0
	ReportsProcessingDelayMinutes *int64 `json:"reportsProcessingDelayMinutes,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *OrganizationSettings) UnmarshalJSON(data []byte) error {
	var props struct {

		// bonus percentage
		// Maximum: 100
		// Minimum: 0
		BonusPercentage *int64 `json:"bonusPercentage,omitempty"`

		// id
		// Format: uuid
		ID strfmt.UUID `json:"id,omitempty"`

		// organization Id
		// Format: uuid
		OrganizationID strfmt.UUID `json:"organizationId,omitempty"`

		// reports processing delay minutes
		// Minimum: 0
		ReportsProcessingDelayMinutes *int64 `json:"reportsProcessingDelayMinutes,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.BonusPercentage = props.BonusPercentage
	m.ID = props.ID
	m.OrganizationID = props.OrganizationID
	m.ReportsProcessingDelayMinutes = props.ReportsProcessingDelayMinutes
	return nil
}

// Validate validates this organization settings
func (m *OrganizationSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBonusPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportsProcessingDelayMinutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationSettings) validateBonusPercentage(formats strfmt.Registry) error {
	if swag.IsZero(m.BonusPercentage) { // not required
		return nil
	}

	if err := validate.MinimumInt("bonusPercentage", "body", *m.BonusPercentage, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("bonusPercentage", "body", *m.BonusPercentage, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationSettings) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationSettings) validateOrganizationID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organizationId", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationSettings) validateReportsProcessingDelayMinutes(formats strfmt.Registry) error {
	if swag.IsZero(m.ReportsProcessingDelayMinutes) { // not required
		return nil
	}

	if err := validate.MinimumInt("reportsProcessingDelayMinutes", "body", *m.ReportsProcessingDelayMinutes, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this organization settings based on context it is used
func (m *OrganizationSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationSettings) UnmarshalBinary(b []byte) error {
	var res OrganizationSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
