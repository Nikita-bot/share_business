// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Wallet wallet
//
// swagger:model Wallet
type Wallet struct {

	// balance
	Balance int64 `json:"balance"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// organization Id
	// Format: uuid
	OrganizationID strfmt.UUID `json:"organizationId,omitempty"`

	// pending balance
	PendingBalance int64 `json:"pendingBalance"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Wallet) UnmarshalJSON(data []byte) error {
	var props struct {

		// balance
		Balance int64 `json:"balance"`

		// id
		// Format: uuid
		ID strfmt.UUID `json:"id,omitempty"`

		// organization Id
		// Format: uuid
		OrganizationID strfmt.UUID `json:"organizationId,omitempty"`

		// pending balance
		PendingBalance int64 `json:"pendingBalance"`

		// user Id
		UserID string `json:"userId,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Balance = props.Balance
	m.ID = props.ID
	m.OrganizationID = props.OrganizationID
	m.PendingBalance = props.PendingBalance
	m.UserID = props.UserID
	return nil
}

// Validate validates this wallet
func (m *Wallet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wallet) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Wallet) validateOrganizationID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organizationId", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this wallet based on context it is used
func (m *Wallet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Wallet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Wallet) UnmarshalBinary(b []byte) error {
	var res Wallet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
