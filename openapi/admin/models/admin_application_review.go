// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdminApplicationReview admin application review
//
// swagger:model AdminApplicationReview
type AdminApplicationReview struct {

	// organization Id
	// Format: uuid
	OrganizationID *strfmt.UUID `json:"organizationId,omitempty"`

	// status
	// Enum: [accept reject]
	Status string `json:"status,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *AdminApplicationReview) UnmarshalJSON(data []byte) error {
	var props struct {

		// organization Id
		// Format: uuid
		OrganizationID *strfmt.UUID `json:"organizationId,omitempty"`

		// status
		// Enum: [accept reject]
		Status string `json:"status,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.OrganizationID = props.OrganizationID
	m.Status = props.Status
	return nil
}

// Validate validates this admin application review
func (m *AdminApplicationReview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminApplicationReview) validateOrganizationID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organizationId", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

var adminApplicationReviewTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["accept","reject"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adminApplicationReviewTypeStatusPropEnum = append(adminApplicationReviewTypeStatusPropEnum, v)
	}
}

const (

	// AdminApplicationReviewStatusAccept captures enum value "accept"
	AdminApplicationReviewStatusAccept string = "accept"

	// AdminApplicationReviewStatusReject captures enum value "reject"
	AdminApplicationReviewStatusReject string = "reject"
)

// prop value enum
func (m *AdminApplicationReview) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adminApplicationReviewTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdminApplicationReview) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this admin application review based on context it is used
func (m *AdminApplicationReview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdminApplicationReview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminApplicationReview) UnmarshalBinary(b []byte) error {
	var res AdminApplicationReview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
