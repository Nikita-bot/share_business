// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdminUser Admin user profile
//
// swagger:model AdminUser
type AdminUser struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	// Format: uuid
	OrganizationID *strfmt.UUID `json:"organizationId,omitempty"`

	// role
	// Enum: [systemManager admin]
	Role string `json:"role,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *AdminUser) UnmarshalJSON(data []byte) error {
	var props struct {

		// email
		// Format: email
		Email strfmt.Email `json:"email,omitempty"`

		// id
		ID string `json:"id,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// organization Id
		// Format: uuid
		OrganizationID *strfmt.UUID `json:"organizationId,omitempty"`

		// role
		// Enum: [systemManager admin]
		Role string `json:"role,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Email = props.Email
	m.ID = props.ID
	m.Name = props.Name
	m.OrganizationID = props.OrganizationID
	m.Role = props.Role
	return nil
}

// Validate validates this admin user
func (m *AdminUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminUser) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AdminUser) validateOrganizationID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organizationId", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

var adminUserTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["systemManager","admin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adminUserTypeRolePropEnum = append(adminUserTypeRolePropEnum, v)
	}
}

const (

	// AdminUserRoleSystemManager captures enum value "systemManager"
	AdminUserRoleSystemManager string = "systemManager"

	// AdminUserRoleAdmin captures enum value "admin"
	AdminUserRoleAdmin string = "admin"
)

// prop value enum
func (m *AdminUser) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adminUserTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdminUser) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this admin user based on context it is used
func (m *AdminUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdminUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminUser) UnmarshalBinary(b []byte) error {
	var res AdminUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
