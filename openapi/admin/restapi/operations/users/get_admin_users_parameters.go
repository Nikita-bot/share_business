// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetAdminUsersParams creates a new GetAdminUsersParams object
// with the default values initialized.
func NewGetAdminUsersParams() GetAdminUsersParams {

	var (
		// initialize parameters with default values

		limitDefault  = int64(100)
		offsetDefault = int64(0)
	)

	return GetAdminUsersParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,
	}
}

// GetAdminUsersParams contains all the bound params for the get admin users operation
// typically these are obtained from a http.Request
//
// swagger:parameters getAdminUsers
type GetAdminUsersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	IsBlocked *bool
	/*Maximum number of records to return
	  Minimum: 0
	  In: query
	  Default: 100
	*/
	Limit *int64
	/*Number of records to skip for pagination
	  Minimum: 0
	  In: query
	  Default: 0
	*/
	Offset *int64
	/*
	  In: query
	*/
	Role *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAdminUsersParams() beforehand.
func (o *GetAdminUsersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qIsBlocked, qhkIsBlocked, _ := qs.GetOK("isBlocked")
	if err := o.bindIsBlocked(qIsBlocked, qhkIsBlocked, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qRole, qhkRole, _ := qs.GetOK("role")
	if err := o.bindRole(qRole, qhkRole, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIsBlocked binds and validates parameter IsBlocked from query.
func (o *GetAdminUsersParams) bindIsBlocked(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("isBlocked", "query", "bool", raw)
	}
	o.IsBlocked = &value

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetAdminUsersParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetAdminUsersParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetAdminUsersParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", *o.Limit, 0, false); err != nil {
		return err
	}

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetAdminUsersParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetAdminUsersParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	if err := o.validateOffset(formats); err != nil {
		return err
	}

	return nil
}

// validateOffset carries on validations for parameter Offset
func (o *GetAdminUsersParams) validateOffset(formats strfmt.Registry) error {

	if err := validate.MinimumInt("offset", "query", *o.Offset, 0, false); err != nil {
		return err
	}

	return nil
}

// bindRole binds and validates parameter Role from query.
func (o *GetAdminUsersParams) bindRole(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Role = &raw

	if err := o.validateRole(formats); err != nil {
		return err
	}

	return nil
}

// validateRole carries on validations for parameter Role
func (o *GetAdminUsersParams) validateRole(formats strfmt.Registry) error {

	if err := validate.EnumCase("role", "query", *o.Role, []interface{}{"systemManager", "admin", "noAccess"}, true); err != nil {
		return err
	}

	return nil
}
